/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: Caesar.flex.in,v 1.2 2004-01-12 10:39:28 klose Exp $
 */

package org.caesarj.compiler;

import org.caesarj.kjc.*;
import org.caesarj.compiler.CWarning;
import org.caesarj.compiler.Compiler;
import org.caesarj.compiler.CompilerMessages;
import org.caesarj.compiler.JavaStyleComment;
import org.caesarj.compiler.JavadocComment;

import org.caesarj.compiler.tools.antlr.extra.CToken;
import org.caesarj.compiler.tools.antlr.extra.InputBuffer;



%%

%public
%class CaesarScanner
%extends org.caesarj.compiler.tools.antlr.extra.Scanner
%implements CaesarTokenTypes

%function nextTokenImpl
%type org.caesarj.compiler.tools.antlr.runtime.Token

%unicode
%pack

%{
  public CaesarScanner(Compiler compiler, InputBuffer buffer) {
    super(compiler, buffer);
    this.buffer = buffer;
  }

  /**
   * Creates a character literal token.
   */
  private CToken buildCharacterLiteral(char image) {
    return new CToken(CHARACTER_LITERAL, String.valueOf(image));
  }


  private final StringBuffer	string = new StringBuffer();
  
  private final StringBuffer	pattern = new StringBuffer();
  
  private boolean typePatternExpected;
  
  private int oldState;
%}

%init{
  // dummy: we provide our own constructor
  super(null, null);
%init}

%eofval{
  return TOKEN_EOF;
%eofval}

/*
 * macros
 */
// white space
W =	[ \t\f]

// line terminator
T =	\r|\n|\r\n

// decimal digit
D =	[0-9]

// hexadecimal digit
H =	[0-9a-fA-F]

// octal digit
O =	[0-7]

// exponent part
E =	[eE] [+\-]? {D}+


%state TYPEPATTERN, STRINGLITERAL, CHARLITERAL, TRADITIONALCOMMENT, ENDOFLINECOMMENT

%%

<YYINITIAL> {
  "assert"			{ 
				  if (getCompiler().getSourceVersion() >=  KjcEnvironment.SOURCE_1_4) { 
				    return TOKEN_JAVAASSERT; 
				  } else { 
				    reportTrouble(new CWarning(getTokenReference(),
					                       KjcMessages.ASSERT_AS_IDENTIFIER));
				    return new CToken(IDENT, yytext().intern()); 
				  } 
				}
				
   "pointcut" {typePatternExpected = true; return TOKEN_LITERAL_pointcut;}
   "before" {typePatternExpected = true; return TOKEN_LITERAL_before;}
   "after" {typePatternExpected = true; return TOKEN_LITERAL_after;}
   "around" {typePatternExpected = true; return TOKEN_LITERAL_around;} 
   
   "declare" {yybegin(TYPEPATTERN); pattern.setLength(0); return TOKEN_LITERAL_declare;}

   
  /* type pattern */
  \:				{ if(typePatternExpected) {
  						yybegin(TYPEPATTERN);
  						pattern.setLength(0);
  					  } else {
  					  	return TOKEN_COLON;
  					  }
  					}
  					
  \;				{typePatternExpected = false; return TOKEN_SEMI;}  	
				  
%%include CaesarFlexRules.txt  

  /* string literal */
  \"    			{ yybegin(STRINGLITERAL); string.setLength(0); }

  /* character literal */
  \'    			{ yybegin(CHARLITERAL); }

  /* numeric literals */
  (0 | [1-9]{D}*) [lL]?		{ return new CToken(INTEGER_LITERAL, yytext()); }
  (0 [xX] {H}+) [lL]?		{ return new CToken(INTEGER_LITERAL, yytext()); }
  (0 {O}+) [lL]?		{ return new CToken(INTEGER_LITERAL, yytext()); }

  {D}+ \. {D}* {E}? [fFdD]?	{ return new CToken(REAL_LITERAL, yytext()); }
  \. {D}+ {E}? [fFdD]?		{ return new CToken(REAL_LITERAL, yytext()); }
  {D}+ {E} [fFdD]?		{ return new CToken(REAL_LITERAL, yytext()); }
  {D}+ [fFdD]			{ return new CToken(REAL_LITERAL, yytext()); }

  /* comments */
  "/*"				{ yybegin(TRADITIONALCOMMENT); string.setLength(0); }
  "//"				{ yybegin(ENDOFLINECOMMENT); string.setLength(0); }

  /* whitespace */
  {T}				{ incrementLine(); }
  {W}				{ /* ignore */ }

  /* identifiers */
  [:jletter:][:jletterdigit:]* { return new CToken(IDENT, yytext().intern()); }
  
}


<TYPEPATTERN> {

  [^\{\;\/]	{ pattern.append(yytext()); }
  
  [^\{\;\/] /(\;|\{)	{ typePatternExpected = false;
  					  oldState= YYINITIAL; 
  					  yybegin(YYINITIAL);
  					  pattern.append(yytext()); 
  					  return new CToken(TYPE_PATTERN, pattern.toString()); }
  					  
  {T}	{ incrementLine();}
  
  /* comments */
  "/*"				{ oldState = yystate(); yybegin(TRADITIONALCOMMENT); string.setLength(0); }
  "//"				{ oldState = yystate(); yybegin(ENDOFLINECOMMENT); string.setLength(0); }  
}

<STRINGLITERAL> {
  \"    			{ yybegin(YYINITIAL); return new CToken(STRING_LITERAL, string.toString()); }

  [^\r\n\"\\]+			{ string.append(yytext()); }

  /* escape sequences */
  "\\b" 			{ string.append('\b'); }
  "\\t" 			{ string.append('\t'); }
  "\\n" 			{ string.append('\n'); }
  "\\f" 			{ string.append('\f'); }
  "\\r" 			{ string.append('\r'); }
  "\\\""			{ string.append('\"'); }
  "\\'" 			{ string.append('\''); }
  "\\\\"			{ string.append('\\'); }
  \\[0-3]?{O}?{O}		{
				  int		val;

				  val = Integer.parseInt(yytext().substring(1), 8);
				  string.append((char)val);
				}

  /* error cases */
  \\.   			{ reportTrouble(CompilerMessages.BAD_ESCAPE_SEQUENCE, new Object[]{ yytext() }); }
  {T}				{ reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "string literal" }); }
}

<CHARLITERAL> {
  [^\r\n\'\\]\'			{ yybegin(YYINITIAL); return buildCharacterLiteral(yytext().charAt(0)); }

  /* escape sequences */
  "\\b"\'       		{ yybegin(YYINITIAL); return buildCharacterLiteral('\b'); }
  "\\t"\'       		{ yybegin(YYINITIAL); return buildCharacterLiteral('\t'); }
  "\\n"\'       		{ yybegin(YYINITIAL); return buildCharacterLiteral('\n'); }
  "\\f"\'       		{ yybegin(YYINITIAL); return buildCharacterLiteral('\f'); }
  "\\r"\'       		{ yybegin(YYINITIAL); return buildCharacterLiteral('\r'); }
  "\\\""\'      		{ yybegin(YYINITIAL); return buildCharacterLiteral('\"'); }
  "\\'"\'       		{ yybegin(YYINITIAL); return buildCharacterLiteral('\''); }
  "\\\\"\'      		{ yybegin(YYINITIAL); return buildCharacterLiteral('\\'); }
  \\[0-3]?{O}?{O}\'		{
				  yybegin(YYINITIAL);

				  int		val;

				  val = Integer.parseInt(yytext().substring(1, yylength()-1), 8);
				  return buildCharacterLiteral((char)val);
				}

  /* error cases */
  \\.   			{ reportTrouble(CompilerMessages.BAD_ESCAPE_SEQUENCE, new Object[]{ yytext() }); }
  {T}				{ reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "character literal" }); }
}

<TRADITIONALCOMMENT> {

  // !!! handle /* in traditional comment

  \*+ "/"			{
				  yybegin(oldState);

				  if (string.length() > 0 && string.charAt(0) == '*') {
				    //!!! graf 001222: first '*' should be removed
				    addComment(new JavadocComment(string.toString(), false, false));
				  } else {
				    addComment(new JavaStyleComment(string.toString(), false, false, false));
				  }
				}

  [^\r\n*]+			{ string.append(yytext()); }
  \*+ [^*/\r\n]			{ string.append(yytext()); }
  \*+ {T}			{
				  incrementLine();
				  string.append(yytext());
				}
  {T}				{
				  incrementLine();
				  string.append(yytext());
				}
  <<EOF>>			{
				  reportTrouble(CompilerMessages.EOF_IN_TRADITIONAL_COMMENT, null);
				  return TOKEN_EOF;
				}
}

<ENDOFLINECOMMENT> {

  [^\r\n]+			{ string.append(yytext()); }
  {T}				{
				  yybegin(oldState);
				  incrementLine();
				  addComment(new JavaStyleComment(string.toString(), true, false, false));
				}
  <<EOF>>			{
				  reportTrouble(new CWarning(getTokenReference(),
							     CompilerMessages.EOF_IN_ENDOFLINE_COMMENT));
				  return TOKEN_EOF;
				}
}

/* error fallback */
.|\n				{ reportTrouble(CompilerMessages.ILLEGAL_CHAR, new Object[]{ yytext() }); }
