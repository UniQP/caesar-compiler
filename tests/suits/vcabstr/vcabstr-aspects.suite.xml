<testsuite name="Tests for abstract crosscutting classes" package="suits.vcabstr.aspects">
	
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="abstrasp001" description="Test pointcuts in abstract classes">
		<test>
			new TestA().test();
			System.out.println(TestA.result.toString());
			assertEquals(TestA.result.toString(),
				":before call foo:before call foo:before exec foo:before exec foo:foo:after exec foo:after exec foo" + 
				":before call foo:before call foo:before exec foo:foo:after exec foo");
		</test>
        <code>
        	public class TestA {
        		public static StringBuffer result = new StringBuffer();
        	   	public void test() {
					deploy(new AspectB()) {
						foo();
					}			
					foo();
				}			
				public void foo() {
					result.append(":foo");
				}
			}
        	abstract public cclass StaticAspectA {
				pointcut callFoo() : cflow(call(* TestA.test())) &amp;&amp; call(* TestA.foo());
				before() : callFoo() {
					TestA.result.append(":before call foo");
				}
			}
			public deployed cclass StaticAspectB extends StaticAspectA {
				pointcut callFoo() : cflow(call(* TestA.test())) &amp;&amp; call(* TestA.foo());
				before() : callFoo() {
					TestA.result.append(":before call foo");
				}
			}
			abstract public cclass AspectA {
				pointcut execFoo() : execution(* TestA.foo());
				before() : execFoo() {
					TestA.result.append(":before exec foo");
				}
			}
			public cclass AspectB extends AspectA {
			    protected final static deployed AspectB THIS = new AspectB();
				after() : execFoo()	{
					TestA.result.append(":after exec foo");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="abstrasp002" description="Test pointcuts in inner classes of abstract classes">
		<test>
			new TestA().test();
			System.out.println(TestA.result.toString());
			assertEquals(TestA.result.toString(), ":before call foo:foo:foo");
		</test>
        <code>
        	public class TestA {
        		public static StringBuffer result = new StringBuffer();
        	   	public void test() {
					deploy(new OuterB().new AspectA()) {
						foo();
					}			
					foo();
				}			
				public void foo() {
					result.append(":foo");
				}
			}
        	abstract public cclass OuterA {
        	    abstract public void log();
        	    public cclass AspectA { 
        			pointcut callFoo() : cflow(call(* TestA.test())) &amp;&amp; call(* TestA.foo());
					before() : callFoo() {
						log();
					}
				}
			}
			public cclass OuterB extends OuterA {
				public void log() {
					TestA.result.append(":before call foo");
				}
			}
        </code>
    </compile-run>	
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="abstrasp003" description="Test around advice in an abstract class">
		<test>
			new TestA().test();
			System.out.println(TestA.result.toString());
			assertEquals(TestA.result.toString(), ":around call foo:foo:foo");
		</test>
        <code>
        	public class TestA {
        		public static StringBuffer result = new StringBuffer();
        	   	public void test() {
					deploy(new OuterB()) {
						foo();
					}			
					foo();
				}			
				public void foo() {
					result.append(":foo");
				}
			}
        	abstract public cclass OuterA {
        	    abstract public void log();
    	    	pointcut callFoo() : cflow(call(* TestA.test())) &amp;&amp; call(* TestA.foo());
				Object around() : callFoo() {
					log();
					proceed();
					return null;
				}			
			}
			abstract public cclass OuterC {
			}
			public cclass OuterB extends OuterC &amp; OuterA {
				public void log() {
					TestA.result.append(":around call foo");
				}
			}
			
        </code>
    </compile-run>	
    
</testsuite>
