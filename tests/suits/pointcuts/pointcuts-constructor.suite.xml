<testsuite name="Test object construction related pointcuts" package="suits.pointcuts.constructor">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor001" description="simple call constructor pointcut">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:constructing:beforeString:aString:constructingString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			a = new ClsA("aString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				before():  call (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			before(String s):  call (public ClsA.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructing");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingString");
				}
			}
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor002" description="call constructor pointcut with subtypes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constructingA:after" +
				":beforeString:aString:constructingAString:afterString:aString" +
				":before:constructingA:constructingB:after" +
				":beforeString:bString:constructingA:constructingBString:afterString:bString", res.toString());
						
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			a = new ClsA("aString");
        			
        			ClsB b = new ClsB();
        			b = new ClsB("bString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsB()
				before():  call (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			
    			// Matches new ClsA("aString") and ClsB("bString")
    			before(String s):  call (public ClsA.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
    			// Matches new ClsA() and ClsB()
				after():  call (public ClsA.new()) {
					Test.res.append(":after");
    			}
    			// Matches new ClsA("aString") and ClsB("bString")
    			after(String s):  call (public ClsA.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":afterString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructingA");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingAString");
				}
			}
			
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constructingB");
				}
				
				public ClsB(String s) {
					Test.res.append(":constructingBString");
				}
			}
			
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor003" description="call constructor pointcut with nested classes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constA|" +
				":beforeInternal:constAInternal|" +
				":before:constA:constB|" +
				":beforeInternal:constAInternal:constBInternal", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			ClsA.Internal ia = a.new Internal();
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			ClsB.Internal ib = b.new Internal();
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsB()
				before():  call (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA.Internal() and ClsB.Internal()
				before():  call (public ClsA.Internal.new()) {
					Test.res.append(":beforeInternal");
    			}
    			
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constA");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constAInternal");
					}
				}
			}
			
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constB");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constBInternal");
					}
				}
			}
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor004" description="call constructor pointcut with mixins">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constA|" +
				":beforeInternal:constAInternal|" +
				":constB|" +
				":constBInternal|" +
				":before:constA:constB|" +
				":beforeInternal:constAInternal:constBInternal", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			ClsA.Internal ia = a.new Internal();
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			ClsB.Internal ib = b.new Internal();
        			Test.res.append("|");
        			
        			ClsC c = new ClsC();
        			Test.res.append("|");
        			ClsC.Internal ic = c.new Internal();
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsC()
				before():  call (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA.Internal() and ClsC.Internal()
				before():  call (public ClsA.Internal.new()) {
					Test.res.append(":beforeInternal");
    			}
        	}
			
			public cclass Super {
				public cclass Internal { }
			}
			
			public cclass ClsA extends Super {
				public ClsA() {
					Test.res.append(":constA");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constAInternal");
					}
				}
			}
			
			public cclass ClsB extends Super {
				public ClsB() {
					Test.res.append(":constB");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constBInternal");
					}
				}
			}
			public cclass ClsC extends ClsB &amp; ClsA {
			}
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor005" description="call constructor pointcut with * wildcards">
		<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constA|" +
				":beforeInternal:constAInternal|" +
				":before:constB|" +
				":constBInternal|" +
				":beforeStringInternal-bstring:constBInternal|" +
				":before:constA:constB|" +
				":beforeInternal:constAInternal:constBInternal|" +
				":beforeStringInternal-cstring:constAInternal:constBInternal", res.toString());
				
							
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			ClsA.Internal ia = a.new Internal();
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			ClsB.Internal ib = b.new Internal();
        			Test.res.append("|");
        			ib = b.new Internal("bstring");
        			Test.res.append("|");
        			
        			ClsC c = new ClsC();
        			Test.res.append("|");
        			ClsC.Internal ic = c.new Internal();
        			Test.res.append("|");
        			ic = c.new Internal("cstring");
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA(), ClsB and ClsC()
				before():  call (public Cls*.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA.Internal() and ClsC.Internal()
				before():  call (public ClsA.Intern*.new()) {
					Test.res.append(":beforeInternal");
    			}
    			// Matches new ClsB.Internal(String) and ClsC.Internal(String)
				before(String s):  call (public ClsB.Intern*.new(String)) &amp;&amp; args(s){
					Test.res.append(":beforeStringInternal-" + s);
    			}
        	}
			
			public cclass Super {
				public cclass Internal { }
			}
			
			public cclass ClsA extends Super {
				public ClsA() {
					Test.res.append(":constA");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constAInternal");
					}
				}
			}
			
			public cclass ClsB extends Super {
				public ClsB() {
					Test.res.append(":constB");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constBInternal");
					}
					public Internal(String s) {
						Test.res.append(":constBInternal");
					}
				}
			}
			public cclass ClsC extends ClsB &amp; ClsA {
			}
        </code>
    </compile-run>
    
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor006" description="call constructor pointcut with .. wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constructingA|" +
				":beforeString:aString:constructingAString|" +
				":before:constructingA:constructingB|" +
				":beforeString:bString:constructingA:constructingBString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			a = new ClsA("aString");
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			b = new ClsB("bString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				before():  call (public suits.pointcuts.constructor..ClsA.new()) {
					Test.res.append(":before");
    			}
    			before(String s):  
    				call (public suits.pointcuts.constructor.ppointcutconstructor006..new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructingA");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingAString");
				}
			}
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constructingB");
				}
				
				public ClsB(String s) {
					Test.res.append(":constructingBString");
				}
			}
        </code>
    </compile-run>
    
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor007" description="simple call constructor pointcut in regular java class">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:constructing:beforeString:aString:constructingString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			a = new ClsA("aString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				before():  call (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			before(String s):  call (public ClsA.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public class ClsA {
				public ClsA() {
					Test.res.append(":constructing");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingString");
				}
			}
        </code>
    </compile-run>
    
    
    
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor011" description="simple execution constructor pointcut">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:constructing:beforeString:aString:constructingString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			a = new ClsA("aString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				before():  execution (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			before(String s):  execution (public ClsA.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructing");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingString");
				}
			}
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor012" description="execution constructor pointcut with subtypes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constructingA|" +
				":beforeString:aString:constructingAString|" +
				":before:before:constructingA:constructingB|" +
				":beforeString:bString:before:constructingA:constructingBString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			a = new ClsA("aString");
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			b = new ClsB("bString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsB()
				before():  execution (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA("aString") and ClsB("bString")
    			before(String s):  execution (public ClsA.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructingA");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingAString");
				}
			}
			
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constructingB");
				}
				
				public ClsB(String s) {
					Test.res.append(":constructingBString");
				}
			}
			
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor013" description="execution constructor pointcut with nested classes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constA|" +
				":beforeInternal:constAInternal|" +
				":before:before:constA:constB|" +
				":beforeInternal:beforeInternal:constAInternal:constBInternal", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			ClsA.Internal ia = a.new Internal();
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			ClsB.Internal ib = b.new Internal();
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsB()
				before():  execution (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA.Internal() and ClsB.Internal()
				before():  execution (public ClsA.Internal.new()) {
					Test.res.append(":beforeInternal");
    			}
    			
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constA");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constAInternal");
					}
				}
			}
			
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constB");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constBInternal");
					}
				}
			}
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor014" description="execution constructor pointcut with mixins">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constA|" +
				":beforeInternal:constAInternal|" +
				":constB|" +
				":constBInternal|" +
				":before:before:constA:constB|" +
				":beforeInternal:beforeInternal:constAInternal:constBInternal", res.toString());
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			ClsA.Internal ia = a.new Internal();
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			ClsB.Internal ib = b.new Internal();
        			Test.res.append("|");
        			
        			ClsC c = new ClsC();
        			Test.res.append("|");
        			ClsC.Internal ic = c.new Internal();
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsC()
				before():  execution (public ClsA.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA.Internal() and ClsC.Internal()
				before():  execution (public ClsA.Internal.new()) {
					Test.res.append(":beforeInternal");
    			}
        	}
			
			public cclass Super {
				public cclass Internal { }
			}
			
			public cclass ClsA extends Super {
				public ClsA() {
					Test.res.append(":constA");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constAInternal");
					}
				}
			}
			
			public cclass ClsB extends Super {
				public ClsB() {
					Test.res.append(":constB");
				}
				
				public cclass Internal {
					
					public Internal() {
						Test.res.append(":constBInternal");
					}
				}
			}
			public cclass ClsC extends ClsB &amp; ClsA {
			}
        </code>
    </compile-run>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor015" description="execution constructor pointcut with * wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constructingA|" +
				":beforeString:aString:constructingAString|" +
				":before:before:constructingA:constructingB|" +
				":beforeString:bString:before:constructingA:constructingBString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			a = new ClsA("aString");
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			b = new ClsB("bString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsB()
				before():  execution (public Cls*.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA("aString") and ClsB("bString")
    			before(String s):  execution (public Cls*.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructingA");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingAString");
				}
			}
			
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constructingB");
				}
				
				public ClsB(String s) {
					Test.res.append(":constructingBString");
				}
			}
        </code>
    </compile-run>
    
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor016" description="execution constructor pointcut with .. wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constructingA|" +
				":beforeString:aString:constructingAString|" +
				":before:before:constructingA:constructingB|" +
				":beforeString:bString:before:constructingA:constructingBString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			Test.res.append("|");
        			a = new ClsA("aString");
        			Test.res.append("|");
        			
        			ClsB b = new ClsB();
        			Test.res.append("|");
        			b = new ClsB("bString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				// Matches new ClsA() and ClsB()
				before():  execution (public suits.pointcuts.constructor..ClsA.new()) {
					Test.res.append(":before");
    			}
    			// Matches new ClsA("aString") and ClsB("bString")
    			before(String s):  execution (public suits.pointcuts.constructor.ppointcutconstructor016..new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public cclass ClsA {
				public ClsA() {
					Test.res.append(":constructingA");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingAString");
				}
			}
			
			public cclass ClsB extends ClsA {
				public ClsB() {
					Test.res.append(":constructingB");
				}
				
				public ClsB(String s) {
					Test.res.append(":constructingBString");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutconstructor017" description="simple execution constructor pointcut in regular java class">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before:constructing:beforeString:aString:constructingString" +
				":before:constructingB:beforeString:bString:constructingBString", res.toString());			
		</test>
        <code>
        	public class Main {
        		
        		public void run() {
        			ClsA a = new ClsA();
        			a = new ClsA("aString");
        			ClsB b = new ClsB();
        			b = new ClsB("bString");
        		}
        	}
        	
        	public deployed cclass Aspect {

				before():  execution (public Cls*.new()) {
					Test.res.append(":before");
    			}
    			before(String s):  execution (public Cls*.new(String)) &amp;&amp; args(s)  {
					Test.res.append(":beforeString:" + s);
    			}
        	}
			
			public class ClsA {
				public ClsA() {
					Test.res.append(":constructing");
				}
				
				public ClsA(String s) {
					Test.res.append(":constructingString");
				}
			}
			public cclass ClsB {
				public ClsB() {
					Test.res.append(":constructingB");
				}
				public ClsB(String s) {
					Test.res.append(":constructingBString");
				}
			}
        </code>
    </compile-run>

</testsuite>