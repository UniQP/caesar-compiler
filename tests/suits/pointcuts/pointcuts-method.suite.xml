<testsuite name="Test method related pointcuts" package="suits.pointcuts.method">

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod001" description="simple call pointcut">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): call (void ClsB.m()) {
					Test.res.append(":before");
				}
        	}
			
			public cclass ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
        </code>
    </compile-run>
   
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod002" description="call pointcut with subtypes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsA.a:before2:ClsA.b:before1:ClsA.a:before2:ClsB.b:before3:ClsB.c" +
				":before1:before4:ClsC.a:before2:ClsB.b:before3:ClsC.c:before5:ClsC.d", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsA a = new ClsA();
        			a.a();
        			a.b();
        			ClsB b = new ClsB();
        			b.a();
        			b.b();
        			b.c();
        			ClsC c = new ClsC();
        			c.a();
        			c.b();
        			c.c();
        			c.d();
        		}
        	}
        	
        	public deployed cclass Aspect {
        		// Matches a.a(), b.a() and c.a()
        		before(): call (void ClsA.a()) {
					Test.res.append(":before1");
				}
				// Matches a.b(), b.b() and c.b()
				before(): call (void ClsA.b()) {
					Test.res.append(":before2");
				}
				// Matches b.c() and c.c()
				before(): call (void ClsB.c()) {
					Test.res.append(":before3");
				}
				// Matches c.a()
				before(): call (void ClsC.a()) {
					Test.res.append(":before4");
				}
				// Matches c.d()
				before(): call (void ClsC.d()) {
					Test.res.append(":before5");
				}
        	}
			
			public cclass ClsA {
			
				public void a() {
					Test.res.append(":ClsA.a");
				}
				public void b() {
					Test.res.append(":ClsA.b");
				}
			}
			
			public cclass ClsB extends ClsA {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				public void c() {
					Test.res.append(":ClsB.c");
				}
			}
			
			public cclass ClsC extends ClsB {

				public void a() {
					Test.res.append(":ClsC.a");
				}
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void d() {
					Test.res.append(":ClsC.d");
				}
			}
        </code>
    </compile-run>

    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod003" description="call pointcut with nested classes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:before2:ClsA.a:before3:ClsC.c", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.m();
					
					ClsC.Internal i = c.new Internal();
					i.c();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches c.m()
        		before(): call (void ClsA.m()) {
					Test.res.append(":before1");
				}
				// Matches new Internal().a();
        		before(): call (void ClsA.Internal.a()) {
					Test.res.append(":before2");
				}
				// Matches i.c();
        		before(): call (void ClsC.Internal.c()) {
					Test.res.append(":before3");
				}
        	}

			public cclass ClsC extends ClsA {
			
				public cclass Internal {
					public void c() {
						Test.res.append(":ClsC.c");
					}
				}
			}
			
			public cclass ClsA {
				
				public void m() {
					new Internal().a();
				}
				
				public cclass Internal {
					public void a() {
						Test.res.append(":ClsA.a");
					}
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod004" description="call pointcut with mixins">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before4:before5:before6:before7:ClsA.a:before3:before6:before7:ClsB.b" +
				":before6:before7:ClsC.c:before6:before7:before8:IntA.a:before8:IntB.b", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.a();
					c.b();
					c.c();
					c.mix();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches nothing!
        		before(): call (void ClsA.c()) {
					Test.res.append(":before1");
				}
				// Matches nothing!
        		before(): call (void ClsA.b()) {
					Test.res.append(":before2");
				}
				// Matches c.b()
        		before(): call (void ClsB.b()) {
					Test.res.append(":before3");
				}
				// Matches c.a()
        		before(): call (void ClsA.a()) {
					Test.res.append(":before4");
				}
				// Matches c.a()
        		before(): call (void ClsA.*()) {
					Test.res.append(":before5");
				}
				// Matches c.a(), c.b(), c.c() and c.mix()
        		before(): call (void ClsC.*()) {
					Test.res.append(":before6");
				}
				// Matches c.a(), c.b(), c.c() and c.mix()
        		before(): call (void ClsA+.*()) {
					Test.res.append(":before7");
				}
				// Matches i.internal_a() and i.internal_b()
        		before(): call (void ClsC.Internal.*()) {
					Test.res.append(":before8");
				}
        	}

			public cclass Super {
				public cclass Internal {}
			} 
			
			public cclass ClsA extends Super {

				public void a() {
					Test.res.append(":ClsA.a");
				}
				
				public cclass Internal {
					public void internal_a() {
						Test.res.append(":IntA.a");
					}
				}
			}
			
			public cclass ClsB extends Super {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				
				public cclass Internal {
					public void internal_b() {
						Test.res.append(":IntB.b");
					}
				}
			}
			
			public cclass ClsC extends ClsB &amp; ClsA {
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void mix() {
					Internal i = new Internal();
					i.internal_a();
					i.internal_b();
				}
			}
        </code>
    </compile-run>

    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod005" description="call pointcut with * wildcards">
        	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsA.a:before2:ClsC.mix" +
				":before3:before4:IntA.a" +
				":before1:ClsA.a:before2:ClsD.mix" +
				":before4:IntA.a", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.a();
					c.mix();
					ClsC.Internal ci = c.new Internal();
					ci.internal_a();
					ClsD d = new ClsD();
					d.a();
					d.mix();
					ClsD.Internal di = d.new Internal();
					di.internal_a();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		before(): call (void Cls*.a()) {
					Test.res.append(":before1");
				}
				before(): call (void Cls*.mix()) {
					Test.res.append(":before2");
				}
				// Matches only ClsC
				before(): call (void ClsC.Intern*.*()) {
					Test.res.append(":before3");
				}
				// Matches both
				before(): call (void ClsB.Intern*+.*()) {
					Test.res.append(":before4");
				}
        	}

			public cclass Super {
				public cclass Internal {}
			} 
			
			public cclass ClsA extends Super {

				public void a() {
					Test.res.append(":ClsA.a");
				}
				
				public cclass Internal {
					public void internal_a() {
						Test.res.append(":IntA.a");
					}
				}
			}
			
			public cclass ClsB extends Super {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				
				public cclass Internal {
					public void internal_b() {
						Test.res.append(":IntB.b");
					}
				}
			}
			
			public cclass ClsC extends ClsB &amp; ClsA {
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void mix() {
					Test.res.append(":ClsC.mix");
				}
			}
			public cclass ClsD extends ClsA &amp; ClsB {
				public void d() {
					Test.res.append(":ClsD.d");
				}
				public void mix() {
					Test.res.append(":ClsD.mix");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod006" description="call pointcut with .. wildcards">
        <test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsA.a:before2:ClsC.mix" +
				":before3:before4:IntA.a" +
				":before1:ClsA.a:before2:ClsD.mix" +
				":before4:IntA.a", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.a();
					c.mix();
					ClsC.Internal ci = c.new Internal();
					ci.internal_a();
					ClsD d = new ClsD();
					d.a();
					d.mix();
					ClsD.Internal di = d.new Internal();
					di.internal_a();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		before(): call (void suits.pointcuts.method.ppointcutmethod006..a()) {
					Test.res.append(":before1");
				}
				before(): call (void suits.pointcuts.method..*.mix()) {
					Test.res.append(":before2");
				}
				// Matches only ClsC
				before(): call (void suits.pointcuts.method..ClsC.Intern*.*()) {
					Test.res.append(":before3");
				}
				// Matches both
				before(): call (void suits.pointcuts.method.ppointcutmethod006..Intern*+.*()) {
					Test.res.append(":before4");
				}
        	}

			public cclass Super {
				public cclass Internal {}
			} 
			
			public cclass ClsA extends Super {

				public void a() {
					Test.res.append(":ClsA.a");
				}
				
				public cclass Internal {
					public void internal_a() {
						Test.res.append(":IntA.a");
					}
				}
			}
			
			public cclass ClsB extends Super {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				
				public cclass Internal {
					public void internal_b() {
						Test.res.append(":IntB.b");
					}
				}
			}
			
			public cclass ClsC extends ClsB &amp; ClsA {
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void mix() {
					Test.res.append(":ClsC.mix");
				}
			}
			public cclass ClsD extends ClsA &amp; ClsB {
				public void d() {
					Test.res.append(":ClsD.d");
				}
				public void mix() {
					Test.res.append(":ClsD.mix");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod007" description="simple static call pointcut">
        <test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsC.mix:" +
				"before2:IntA.a:" +
				"before1:ClsD.mix", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC.mix();
					ClsC.Internal.internal_a();
					ClsD.mix();
        		}
        	}
        	
        	public deployed cclass Aspect {

				before(): call (static void Cls*.mix()) {
					Test.res.append(":before1");
				}
				before(): call (static void ClsC.Internal.*()) {
					Test.res.append(":before2");
				}
        	}

			public cclass Super {
				public cclass Internal {}
			} 
			
			public cclass ClsA extends Super {

				public void a() {
					Test.res.append(":ClsA.a");
				}
				
				public cclass Internal {
					public static void internal_a() {
						Test.res.append(":IntA.a");
					}
				}
			}
			
			public cclass ClsB extends Super {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				
				public cclass Internal {
					public static void internal_b() {
						Test.res.append(":IntB.b");
					}
				}
			}
			
			public cclass ClsC extends ClsB &amp; ClsA {
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public static void mix() {
					Test.res.append(":ClsC.mix");
				}
			}
			public cclass ClsD extends ClsA &amp; ClsB {
				public void d() {
					Test.res.append(":ClsD.d");
				}
				public static void mix() {
					Test.res.append(":ClsD.mix");
				}
			}
        </code>
    </compile-run>
   
   	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod008" description="simple call pointcut in regular java class">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): call (void ClsB.m()) {
					Test.res.append(":before");
				}
        	}
			
			public class ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
        </code>
    </compile-run>
   
   
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod011" description="simple execution pointcut">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): execution (void ClsB.m()) {
					Test.res.append(":before");
				}
        	}
			
			public cclass ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
        </code>
    </compile-run>
   
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod012" description="execution pointcut with subtypes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsA.a:before2:ClsA.b:before1:ClsA.a:before2:ClsB.b:before3:ClsB.c" +
				":before1:before4:ClsC.a:before2:ClsB.b:before3:ClsC.c:before5:ClsC.d", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsA a = new ClsA();
        			a.a();
        			a.b();
        			ClsB b = new ClsB();
        			b.a();
        			b.b();
        			b.c();
        			ClsC c = new ClsC();
        			c.a();
        			c.b();
        			c.c();
        			c.d();
        		}
        	}
        	
        	public deployed cclass Aspect {
        		// Matches a.a(), b.a() and c.a()
        		before(): execution (void ClsA.a()) {
					Test.res.append(":before1");
				}
				// Matches a.b(), b.b() and c.b()
				before(): execution (void ClsA.b()) {
					Test.res.append(":before2");
				}
				// Matches b.c() and c.c()
				before(): execution (void ClsB.c()) {
					Test.res.append(":before3");
				}
				// Matches c.a()
				before(): execution (void ClsC.a()) {
					Test.res.append(":before4");
				}
				// Matches c.d()
				before(): execution (void ClsC.d()) {
					Test.res.append(":before5");
				}
        	}
			
			public cclass ClsA {
			
				public void a() {
					Test.res.append(":ClsA.a");
				}
				public void b() {
					Test.res.append(":ClsA.b");
				}
			}
			
			public cclass ClsB extends ClsA {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				public void c() {
					Test.res.append(":ClsB.c");
				}
			}
			
			public cclass ClsC extends ClsB {

				public void a() {
					Test.res.append(":ClsC.a");
				}
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void d() {
					Test.res.append(":ClsC.d");
				}
			}
        </code>
    </compile-run>

    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod013" description="execution pointcut with nested classes">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:before2:ClsA.a:before3:ClsC.c", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.m();
					
					ClsC.Internal i = c.new Internal();
					i.c();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches c.m()
        		before(): execution (void ClsA.m()) {
					Test.res.append(":before1");
				}
				// Matches new Internal().a();
        		before(): execution (void ClsA.Internal.a()) {
					Test.res.append(":before2");
				}
				// Matches i.c();
        		before(): execution (void ClsC.Internal.c()) {
					Test.res.append(":before3");
				}
        	}

			public cclass ClsC extends ClsA {
			
				public cclass Internal {
					public void c() {
						Test.res.append(":ClsC.c");
					}
				}
			}
			
			public cclass ClsA {
				
				public void m() {
					new Internal().a();
				}
				
				public cclass Internal {
					public void a() {
						Test.res.append(":ClsA.a");
					}
				}
			
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod014" description="execution pointcut with mixins">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before4:before5:before7:ClsA.a:before3:before7:ClsB.b" +
				":before6:before7:ClsC.c:before6:before7:IntA.a:before8:IntC.b", res.toString());
						
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.a();
					c.b();
					c.c();
					c.mix();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches nothing!
        		before(): execution (void ClsA.c()) {
					Test.res.append(":before1");
				}
				// Matches nothing!
        		before(): execution (void ClsA.b()) {
					Test.res.append(":before2");
				}
				// Matches c.b()
        		before(): execution (void ClsB.b()) {
					Test.res.append(":before3");
				}
				// Matches c.a()
        		before(): execution (void ClsA.a()) {
					Test.res.append(":before4");
				}
				// Matches c.a()
        		before(): execution (void ClsA.*()) {
					Test.res.append(":before5");
				}
				// Matches c.c() and c.mix()
        		before(): execution (void ClsC.*()) {
					Test.res.append(":before6");
				}
				// Matches c.a(), c.b(), c.c() and c.mix()
        		before(): execution (void ClsA+.*()) {
					Test.res.append(":before7");
				}
				// Matches i.internal_b() (inside ClsC!)
        		before(): execution (void ClsC.Internal.*()) {
					Test.res.append(":before8");
				}
				
        	}

			public cclass Super {
				public cclass Internal {}
			} 
			
			public cclass ClsA extends Super {

				public void a() {
					Test.res.append(":ClsA.a");
				}
				
				public cclass Internal {
					public void internal_a() {
						Test.res.append(":IntA.a");
					}
				}
			}
			
			public cclass ClsB extends Super {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				
				public cclass Internal {
					public void internal_b() {
						Test.res.append(":IntB.b");
					}
				}
			}
			
			public cclass ClsC extends ClsB &amp; ClsA {
			
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void mix() {
					Internal i = new Internal();
					i.internal_a();
					i.internal_b();
				}
				public cclass Internal {
					public void internal_b() {
						Test.res.append(":IntC.b");
					}
				}
			}
        </code>
    </compile-run>

    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod015" description="execution pointcut with * wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m:beforeI:i", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        			ClsB.Internal bi = b.new Internal();
        			bi.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): execution (void Cls*.m()) {
					Test.res.append(":before");
				}
				
				before(): execution (void ClsB.Interna*.m()) {
					Test.res.append(":beforeI");
				}
        	}
			
			public cclass ClsB {

				public void m() {
					Test.res.append(":m");
				}
				
				public cclass Internal {
					public void m() {
						Test.res.append(":i");
					}
				}
			}

        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod016" description="execution pointcut with .. wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): execution (void suits.pointcuts.method.ppointcutmethod016..m()) {
					Test.res.append(":before");
				}
        	}
			
			public cclass ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
			
        </code>
    </compile-run>    
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod017" description="simple static execution pointcut">
        <test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsC.mix:" +
				"before2:IntA.a:" +
				"before1:ClsD.mix", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC.mix();
					ClsC.Internal.internal_a();
					ClsD.mix();
        		}
        	}
        	
        	public deployed cclass Aspect {

				before(): execution (static void Cls*.mix()) {
					Test.res.append(":before1");
				}
				before(): execution (static void ClsA.Internal.*()) {
					Test.res.append(":before2");
				}
        	}

			public cclass Super {
				public cclass Internal {}
			} 
			
			public cclass ClsA extends Super {

				public void a() {
					Test.res.append(":ClsA.a");
				}
				
				public cclass Internal {
					public static void internal_a() {
						Test.res.append(":IntA.a");
					}
				}
			}
			
			public cclass ClsB extends Super {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				
				public cclass Internal {
					public static void internal_b() {
						Test.res.append(":IntB.b");
					}
				}
			}
			
			public cclass ClsC extends ClsB &amp; ClsA {
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public static void mix() {
					Test.res.append(":ClsC.mix");
				}
			}
			public cclass ClsD extends ClsA &amp; ClsB {
				public void d() {
					Test.res.append(":ClsD.d");
				}
				public static void mix() {
					Test.res.append(":ClsD.mix");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod018" description="simple execution pointcut in regular java class">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): execution (void ClsB.m()) {
					Test.res.append(":before");
				}
        	}
			
			public class ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
        </code>
    </compile-run>
    
    
    
    
    
    
    
    
    
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod102" description="simple call pointcut with this and target">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): call (void ClsB.m()) &amp;&amp; this(Main) &amp;&amp; target(ClsB) {
					Test.res.append(":before");
				}
        	}
			
			public cclass ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
        </code>
    </compile-run>

 
    
        <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod104" description="simple execution pointcut with this and target">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(":before:before3:m", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsB b = new ClsB();
        			b.m();
        		}
        	}
        	
        	public deployed cclass ClsA {
        		before(): execution (void ClsB.m()) &amp;&amp; this(ClsB) &amp;&amp; target(ClsB) {
					Test.res.append(":before");
				}
				// This is not supposed to work ("this" is not Main)
				before(): execution (void ClsB.m()) &amp;&amp; this(Main) &amp;&amp; target(ClsB) {
					Test.res.append(":before2");
				}
				before(ClsB b): execution (void ClsB.m()) &amp;&amp; this(b) &amp;&amp; target(ClsB) {
					Test.res.append(":before3");
				}
				// This is not supposed to work ("this" is not Main)
				before(Main m): execution (void ClsB.m()) &amp;&amp; this(m) &amp;&amp; target(ClsB) {
					Test.res.append(":before4");
				}
        	}
			
			public cclass ClsB {

				public void m() {
					Test.res.append(":m");
				}
			}
        </code>
    </compile-run>
    

    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod106" description="call pointcut with inheritance and wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:before2:ClsA.a:before2:ClsA.b:before1:before2:ClsA.a:before2:ClsB.b:ClsB.c" +
				":before1:before2:ClsC.a:before2:ClsB.b:ClsC.c:ClsC.d", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsA a = new ClsA();
        			a.a();
        			a.b();
        			ClsB b = new ClsB();
        			b.a();
        			b.b();
        			b.c();
        			ClsC c = new ClsC();
        			c.a();
        			c.b();
        			c.c();
        			c.d();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches a.a(), b.a() and c.a()
        		before(): call (void ClsA+.a()) {
					Test.res.append(":before1");
				}
				// Matches a.a(), a.b(), b.a(), b.b(). c.a() and c.b()
				before(): call (void ClsA.*()) {
					Test.res.append(":before2");
				}
        	}
			
			public cclass ClsA {
			
				public void a() {
					Test.res.append(":ClsA.a");
				}
				public void b() {
					Test.res.append(":ClsA.b");
				}
			}
			
			public cclass ClsB extends ClsA {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				public void c() {
					Test.res.append(":ClsB.c");
				}
			}
			
			public cclass ClsC extends ClsB {

				public void a() {
					Test.res.append(":ClsC.a");
				}
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void d() {
					Test.res.append(":ClsC.d");
				}
			}
        </code>
    </compile-run>
    

    
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod108" description="execution pointcut with inheritance">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:ClsA.a:before2:ClsA.b:before1:ClsA.a:before2:ClsB.b:before3:ClsB.c" +
				":before1:before4:ClsC.a:before2:ClsB.b:before3:ClsC.c:before5:ClsC.d", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsA a = new ClsA();
        			a.a();
        			a.b();
        			ClsB b = new ClsB();
        			b.a();
        			b.b();
        			b.c();
        			ClsC c = new ClsC();
        			c.a();
        			c.b();
        			c.c();
        			c.d();
        		}
        	}
        	
        	public deployed cclass Aspect {
        	
        		// Matches a.a(), b.a() and c.a()
        		before(): execution (void ClsA.a()) {
					Test.res.append(":before1");
				}
				// Matches a.b(), b.b() and c.b()
				before(): execution (void ClsA.b()) {
					Test.res.append(":before2");
				}
				// Matches b.c() and c.c()
				before(): execution (void ClsB.c()) {
					Test.res.append(":before3");
				}
				// Matches c.a()
				before(): execution (void ClsC.a()) {
					Test.res.append(":before4");
				}
				// Matches c.d()
				before(): execution (void ClsC.d()) {
					Test.res.append(":before5");
				}
				
        	}
			
			public cclass ClsA {
			
				public void a() {
					Test.res.append(":ClsA.a");
				}
				public void b() {
					Test.res.append(":ClsA.b");
				}
			}
			
			public cclass ClsB extends ClsA {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				public void c() {
					Test.res.append(":ClsB.c");
				}
			}
			
			public cclass ClsC extends ClsB {

				public void a() {
					Test.res.append(":ClsC.a");
				}
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void d() {
					Test.res.append(":ClsC.d");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod109" description="call pointcut with inheritance and wildcards">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before1:before2:ClsA.a:before2:ClsA.b:before1:before2:ClsA.a:before2:ClsB.b:ClsB.c" +
				":before1:before2:ClsC.a:before2:ClsB.b:ClsC.c:ClsC.d", res.toString());			
		</test>
        <code>
        	public class Main {
        	
        		public void run() {
        			ClsA a = new ClsA();
        			a.a();
        			a.b();
        			ClsB b = new ClsB();
        			b.a();
        			b.b();
        			b.c();
        			ClsC c = new ClsC();
        			c.a();
        			c.b();
        			c.c();
        			c.d();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches a.a(), b.a() and c.a()
        		before(): execution (void ClsA+.a()) {
					Test.res.append(":before1");
				}
				// Matches a.a(), a.b(), b.a(), b.b(). c.a() and c.b()
				before(): execution (void ClsA.*()) {
					Test.res.append(":before2");
				}
        	}
			
			public cclass ClsA {
			
				public void a() {
					Test.res.append(":ClsA.a");
				}
				public void b() {
					Test.res.append(":ClsA.b");
				}
			}
			
			public cclass ClsB extends ClsA {

				public void b() {
					Test.res.append(":ClsB.b");
				}
				public void c() {
					Test.res.append(":ClsB.c");
				}
			}
			
			public cclass ClsC extends ClsB {

				public void a() {
					Test.res.append(":ClsC.a");
				}
				public void c() {
					Test.res.append(":ClsC.c");
				}
				public void d() {
					Test.res.append(":ClsC.d");
				}
			}
        </code>
    </compile-run>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run  id="pointcutmethod110" description="execution pointcut with mixins">
    	<test>
    		Main m = new Main();
    		m.run();
    		
			System.out.println("result: "+ res.toString());
			assertEquals(
				":before4:before5:before7:ClsA.a:before3:before7:ClsB.b:before6:before7:ClsC.c", res.toString());			

		</test>
        <code>
        	public class Main {
        	
        		public void run() {
					ClsC c = new ClsC();
					c.a();
					c.b();
					c.c();
        		}
        	}
        	
        	public deployed cclass Aspect {

        		// Matches nothing!
        		before(): execution (void ClsA.c()) {
					Test.res.append(":before1");
				}
				// Matches nothing!
        		before(): execution (void ClsA.b()) {
					Test.res.append(":before2");
				}
				// Matches c.b()
        		before(): execution (void ClsB.b()) {
					Test.res.append(":before3");
				}
				// Matches c.a()
        		before(): execution (void ClsA.a()) {
					Test.res.append(":before4");
				}
				// Matches c.a()
        		before(): execution (void ClsA.*()) {
					Test.res.append(":before5");
				}
				// Matches c.c()
        		before(): execution (void ClsC.*()) {
					Test.res.append(":before6");
				}
				// Matches c.a(), c.b() and c.c()
        		before(): execution (void ClsA+.*()) {
					Test.res.append(":before7");
				}
        	}

			public cclass ClsC extends ClsB &amp; ClsA {
				public void c() {
					Test.res.append(":ClsC.c");
				}
			}
			
			public cclass ClsA {

				public void a() {
					Test.res.append(":ClsA.a");
				}
			}
			
			public cclass ClsB {

				public void b() {
					Test.res.append(":ClsB.b");
				}
			}
        </code>
    </compile-run>
    
</testsuite>
