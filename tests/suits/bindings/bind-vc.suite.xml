<testsuite name="Test wraps with dependent types" package="suits.bind.vc">
	
	<common-code-base>
		
    </common-code-base>

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="bindvc001" description="test binding neighbour virtual class">
    	<test>
    		final OuterA oa = new OuterA();
    		oa.InnerB b = oa.new InnerB("txt");
    		assertEquals("txt", oa.InnerA(b).text());
    		b = oa.getInnerA(b).wrappee;
    		assertEquals("txt", b.text());
    	</test>
        <code>
            public cclass OuterA {
        		public cclass InnerB {
        			private String txt;
        			public InnerB(String txt) {
        				this.txt = txt;
        			}
					public String text() {
						return txt;
					}
				}
        	
				public cclass InnerA wraps InnerB {
					public String text() {
						return wrappee.text();		
					}
				}
			}
        </code>
    </compile-run>	
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="bindvc002" description="test binding encapsulated family type">
    	<test>
    		final GraphView gv = new GraphView();
    		assertEquals(":0:1:2:3:4", gv.display());
    	</test>
        <code>
            import java.util.ArrayList;
            public cclass Graph {
				private ArrayList nodes = new ArrayList();
				public Graph() {
					for (int i = 0; i &lt; 5; i++) {
						nodes.add(new Node(i));
					}
				}
				public cclass Node {
	    			private int id;
	    			public Node(int id) {
	    				this.id = id;
	    			}
					public int getId() {
						return id;
					}
	    		}
	    		public Node nodeAt(int i) {
	    			return (Node)nodes.get(i);
	    		}
	    		public int nodeCnt() {
	    			return nodes.size();
	    		}
	    	}
        	public cclass GraphView {
        		final public Graph g = new Graph();
        		public cclass NodeView wraps g.Node {
        			public String view() {
        				return ":" + wrappee.getId();
        			}
        		}
        		public String display() {
        			String view = "";
        			for (int i = 0; i &lt; g.nodeCnt(); i++) {
        				g.Node n = g.nodeAt(0);
        				NodeView nv = NodeView(n);
        				view += nv.view();
        			}       
        			return view; 			
        		}
        	}
        </code>
    </compile-run>
	    
</testsuite>
