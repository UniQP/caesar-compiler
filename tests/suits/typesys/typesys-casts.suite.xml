<testsuite name="Test casts to dependent types" package="suits.typesystem.casts">

	<common-code-base>		
		public cclass G {
			public cclass N {
				public void x(M m) {}
			}
			public cclass M {
			}
		}
	</common-code-base>


	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="casts001" description="Check casts">
		<test>			
		    final G g = new G();			
			final G gCopy = g;
		    g.N n = (g.N)gCopy.new N();
		</test>
        <code></code>
    </compile-run>		  	
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="casts002" description="Check casts">
		<test>		
			try {	
			    final G g1 = new G();			
				final G g2 = new G();
			    g1.N n = (g1.N)g2.new N();
			}
			catch(ClassCastException cce) {
				return;
			}
			fail();
		</test>
        <code></code>
    </compile-run>		  	
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="casts003" description="Check casts">
		<test>		
			final GG gg = new GG();
			gg.foo();
		</test>
        <code>
			public cclass GG {
				public N foo() {
					Object res = new N();
					return (N)res;
				}
				public cclass N {}
			}
		</code>
    </compile-run>		  	
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="casts004" description="Check casts">
		<test>		
			final GG gg = new GG();			
			final gg.G g = gg.new G();
			g.foo();
		</test>
        <code>
			public cclass GG {
				public cclass G {
					public N foo() {
						Object res = new N();
						return (N)res;
					}
				}
				public cclass N {}
			}
		</code>
    </compile-run>		  	
	
	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-run id="casts005" description="Check casts">
		<test>		
			final GG gg = new GG();
			GG gg2 = gg.foo();
		</test>
        <code>
			public cclass GG {
				public GG foo() {
					Object res = new GG();
					return (GG)res;
				}
				public cclass N {}
			}
		</code>
    </compile-run>		  

	<!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile id="casts006" description="Check casts">		
        <code>
			public cclass GG extends G {
				public cclass M {					
					public void foo() {	
						Object o = new N();
						((N)o).x( this ); 			// ( (ctx(4).N) o).x( ctx(3) );
					}
				}
			}
		</code>
    </compile>
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= 
    <compile-run id="casts007" description="Cast in method parameter.">
    	<test>
    		try {
    			B.test();
    		}
			catch(ClassCastException cce) {
				return;
			}
			fail();	
    	</test>
        <code>
			public class A {
				final public G g = new G();
				public void foo(g.N n) { 
				}
			}
			public cclass B {
				public static void test() {
					final A a = new A(); 					
					final A a1 = new A();
					a.foo((a.g.N)a1.g.new N());
				}			
			}
		</code>
    </compile-run>-->
    
    <!-- *=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~=*=~~= -->
    <compile-check-error id="casts008" error="ASSIGNMENT_BADTYPE" description="Check cast to implicit sibling class">		
        <code>
        	public cclass P {
        		public cclass A {
	        		public final G g = new G();
	        	}
	        	public cclass B extends A {        		
	        		public g.N getN() { return null; }
	        	}
        		public cclass Q {					
					public void foo() {	
						final A a = new B();
						a.g.N n = ((B)a).getN();
					}
				}
			}
		</code>
    </compile-check-error>			
	

</testsuite>
