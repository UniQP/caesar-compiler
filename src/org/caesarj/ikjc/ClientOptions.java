// Generated by optgen from ClientOptions.opt
package org.caesarj.ikjc;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;

public class ClientOptions extends org.caesarj.util.Options {

  public ClientOptions(String name) {
    super(name);
  }

  public ClientOptions() {
    this("Client");
  }
  public String host = "localhost";
  public int port = 4444;
  public String compiler = "kjc";

  public boolean processOption(int code, Getopt g) {
    switch (code) {
    case 'h':
      host = getString(g, ""); return true;
    case 'p':
      port = getInt(g, 0); return true;
    case 'c':
      compiler = getString(g, ""); return true;
    default:
      return super.processOption(code, g);
    }
  }

  public String[] getOptions() {
    String[]	parent = super.getOptions();
    String[]	total = new String[parent.length + 3];
    System.arraycopy(parent, 0, total, 0, parent.length);
    total[parent.length + 0] = "  --host, -h<String>:   the host name of the compilation server [localhost]";
    total[parent.length + 1] = "  --port, -p<int>:      the port number of the compilation server [4444]";
    total[parent.length + 2] = "  --compiler, -c<String>: the compiler to invoke on the server [kjc]";
    
    return total;
  }


  public String getShortOptions() {
    return "h:p:c:" + super.getShortOptions();
  }


  public void version() {
    System.out.println("Version 2.1A released 11. February 2002");
  }


  public void usage() {
    System.err.println("usage: org.caesarj.ikjc.Client [option]* <files>");
  }


  public void help() {
    System.err.println("usage: org.caesarj.ikjc.Client [option]* <files>");
    printOptions();
    System.err.println();
    version();
    System.err.println();
    System.err.println("This program is part of the Kopi Suite.");
    System.err.println("For more info, please see: http://www.dms.at/kopi");
  }

  public LongOpt[] getLongOptions() {
    LongOpt[]	parent = super.getLongOptions();
    LongOpt[]	total = new LongOpt[parent.length + LONGOPTS.length];
    
    System.arraycopy(parent, 0, total, 0, parent.length);
    System.arraycopy(LONGOPTS, 0, total, parent.length, LONGOPTS.length);
    
    return total;
  }

  private static final LongOpt[] LONGOPTS = {
    new LongOpt("host", LongOpt.REQUIRED_ARGUMENT, null, 'h'),
    new LongOpt("port", LongOpt.REQUIRED_ARGUMENT, null, 'p'),
    new LongOpt("compiler", LongOpt.REQUIRED_ARGUMENT, null, 'c')
  };
}
