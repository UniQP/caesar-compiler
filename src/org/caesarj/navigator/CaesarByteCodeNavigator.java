package org.caesarj.navigator;

import java.io.IOException;

import org.caesarj.compiler.ClassReader;
import org.caesarj.compiler.KjcClassReader;
import org.caesarj.compiler.export.CClass;
import org.caesarj.compiler.types.KjcSignatureParser;
import org.caesarj.compiler.types.KjcTypeFactory;
import org.caesarj.compiler.types.TypeFactory;

/**
 * This class is used for reconstructing the type information from bytecode
 * generated by the Caesar compiler.
 * It uses KjcClassReader and KjcTypeFactory as backend.
 * 
 * @author Ivica Aracic
 */
public class CaesarByteCodeNavigator {

    private ClassReader classReader;
    private TypeFactory factory;
        
    /**
     * @param extDirs extra directories that should be appended to the classpath
     */
    public CaesarByteCodeNavigator(String extDirs) {
        classReader = new KjcClassReader(null, extDirs, new KjcSignatureParser());
        factory = new KjcTypeFactory(classReader);
    }
    
    /**
     * generates the export informations of a class from the classpath
     */
    public CClass load(String qn) {        
        return classReader.loadClass(factory, qn);
    }
    
    /**
     * This method demonstrates the usage of CaesarByteCodeNavigator
     */
    public static void main(String[] args) throws IOException {
        CaesarByteCodeNavigator nav = new CaesarByteCodeNavigator("tests/VirtualClassesTests");
        
        CClass clazz = nav.load("generated/test3/TestCase3$CWG");
        
        System.out.println(clazz.getAdditionalTypeInformation());
    }
}
