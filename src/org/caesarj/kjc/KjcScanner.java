/* The following code was generated by JFlex 1.3.2 on 14.08.02 14:07 */

/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: KjcScanner.java,v 1.1 2003-07-05 18:29:38 werner Exp $
 */

package org.caesarj.kjc;

import org.caesarj.compiler.tools.antlr.extra.CToken;
import org.caesarj.compiler.tools.antlr.extra.InputBuffer;
import org.caesarj.compiler.tools.antlr.extra.Scanner;
import org.caesarj.compiler.tools.antlr.runtime.Token;
import org.caesarj.compiler.CWarning;
import org.caesarj.compiler.Compiler;
import org.caesarj.compiler.CompilerMessages;
import org.caesarj.compiler.JavaStyleComment;
import org.caesarj.compiler.JavadocComment;
import org.caesarj.compiler.PositionedError;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 14.08.02 14:07 from the specification file
 * <tt>file:/e:/andreas/kopi/kopi-andreas/src/kjc/Kjc.flex</tt>
 */
public class KjcScanner extends org.caesarj.compiler.tools.antlr.extra.Scanner implements KjcTokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRINGLITERAL = 1;
  final public static int YYINITIAL = 0;
  final public static int TRADITIONALCOMMENT = 3;
  final public static int ENDOFLINECOMMENT = 4;
  final public static int CHARLITERAL = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\101\1\1\1\3\1\0\1\1\1\2\16\101\4\0\1\1\1\56"+
    "\1\72\1\0\1\100\1\60\1\42\1\73\1\57\1\64\1\67\1\10"+
    "\1\50\1\51\1\52\1\66\1\74\3\103\4\6\2\4\1\47\1\65"+
    "\1\55\1\41\1\45\1\61\1\70\3\5\1\77\1\7\1\77\5\100"+
    "\1\75\13\100\1\76\2\100\1\53\1\102\1\62\1\46\1\100\1\0"+
    "\1\11\1\16\1\17\1\30\1\13\1\31\1\33\1\25\1\26\1\100"+
    "\1\23\1\21\1\34\1\22\1\20\1\35\1\71\1\14\1\12\1\15"+
    "\1\27\1\36\1\37\1\32\1\24\1\40\1\54\1\44\1\63\1\43"+
    "\41\101\2\0\4\100\4\0\1\100\12\0\1\100\4\0\1\100\5\0"+
    "\27\100\1\0\37\100\1\0\u0128\100\2\0\22\100\34\0\136\100\2\0"+
    "\11\100\2\0\7\100\16\0\2\100\16\0\5\100\11\0\1\100\21\0"+
    "\117\101\21\0\3\101\27\0\1\100\13\0\1\100\1\0\3\100\1\0"+
    "\1\100\1\0\24\100\1\0\54\100\1\0\10\100\2\0\32\100\14\0"+
    "\202\100\1\0\4\101\5\0\71\100\2\0\2\100\2\0\2\100\3\0"+
    "\46\100\2\0\2\100\67\0\46\100\2\0\1\100\7\0\47\100\11\0"+
    "\21\101\1\0\27\101\1\0\3\101\1\0\1\101\1\0\2\101\1\0"+
    "\1\101\13\0\33\100\5\0\3\100\56\0\32\100\5\0\13\100\13\101"+
    "\12\0\12\101\6\0\1\101\143\100\1\0\1\100\7\101\2\0\6\101"+
    "\2\100\2\101\1\0\4\101\2\0\12\101\3\100\22\0\1\101\1\100"+
    "\1\101\33\100\3\0\33\101\65\0\46\100\13\101\u0150\0\3\101\1\0"+
    "\65\100\2\0\1\101\1\100\20\101\2\0\1\100\4\101\3\0\12\100"+
    "\2\101\2\0\12\101\21\0\3\101\1\0\10\100\2\0\2\100\2\0"+
    "\26\100\1\0\7\100\1\0\1\100\3\0\4\100\2\0\1\101\1\0"+
    "\7\101\2\0\2\101\2\0\3\101\11\0\1\101\4\0\2\100\1\0"+
    "\3\100\2\101\2\0\12\101\4\100\16\0\1\101\2\0\6\100\4\0"+
    "\2\100\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100\1\0"+
    "\2\100\2\0\1\101\1\0\5\101\4\0\2\101\2\0\3\101\13\0"+
    "\4\100\1\0\1\100\7\0\14\101\3\100\14\0\3\101\1\0\7\100"+
    "\1\0\1\100\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100"+
    "\1\0\5\100\2\0\1\101\1\100\10\101\1\0\3\101\1\0\3\101"+
    "\2\0\1\100\17\0\1\100\5\0\12\101\21\0\3\101\1\0\10\100"+
    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100\2\0\4\100"+
    "\2\0\1\101\1\100\6\101\3\0\2\101\2\0\3\101\10\0\2\101"+
    "\4\0\2\100\1\0\3\100\4\0\12\101\22\0\2\101\1\0\6\100"+
    "\3\0\3\100\1\0\4\100\3\0\2\100\1\0\1\100\1\0\2\100"+
    "\3\0\2\100\3\0\3\100\3\0\10\100\1\0\3\100\4\0\5\101"+
    "\3\0\3\101\1\0\4\101\11\0\1\101\17\0\11\101\21\0\3\101"+
    "\1\0\10\100\1\0\3\100\1\0\27\100\1\0\12\100\1\0\5\100"+
    "\4\0\7\101\1\0\3\101\1\0\4\101\7\0\2\101\11\0\2\100"+
    "\4\0\12\101\22\0\2\101\1\0\10\100\1\0\3\100\1\0\27\100"+
    "\1\0\12\100\1\0\5\100\4\0\7\101\1\0\3\101\1\0\4\101"+
    "\7\0\2\101\7\0\1\100\1\0\2\100\4\0\12\101\22\0\2\101"+
    "\1\0\10\100\1\0\3\100\1\0\27\100\1\0\20\100\4\0\6\101"+
    "\2\0\3\101\1\0\4\101\11\0\1\101\10\0\2\100\4\0\12\101"+
    "\22\0\2\101\1\0\22\100\3\0\30\100\1\0\11\100\1\0\1\100"+
    "\2\0\7\100\3\0\1\101\4\0\6\101\1\0\1\101\1\0\10\101"+
    "\22\0\2\101\15\0\60\100\1\101\2\100\7\101\4\0\10\100\10\101"+
    "\1\0\12\101\47\0\2\100\1\0\1\100\2\0\2\100\1\0\1\100"+
    "\2\0\1\100\6\0\4\100\1\0\7\100\1\0\3\100\1\0\1\100"+
    "\1\0\1\100\2\0\2\100\1\0\4\100\1\101\2\100\6\101\1\0"+
    "\2\101\1\100\2\0\5\100\1\0\1\100\1\0\6\101\2\0\12\101"+
    "\2\0\2\100\42\0\1\100\27\0\2\101\6\0\12\101\13\0\1\101"+
    "\1\0\1\101\1\0\1\101\4\0\2\101\10\100\1\0\42\100\6\0"+
    "\24\101\1\0\2\101\4\100\4\0\10\101\1\0\44\101\11\0\1\101"+
    "\71\0\42\100\1\0\5\100\1\0\2\100\1\0\7\101\3\0\4\101"+
    "\6\0\12\101\6\0\6\100\4\101\106\0\46\100\12\0\47\100\11\0"+
    "\132\100\5\0\104\100\5\0\122\100\6\0\7\100\1\0\77\100\1\0"+
    "\1\100\1\0\4\100\2\0\7\100\1\0\1\100\1\0\4\100\2\0"+
    "\47\100\1\0\1\100\1\0\4\100\2\0\37\100\1\0\1\100\1\0"+
    "\4\100\2\0\7\100\1\0\1\100\1\0\4\100\2\0\7\100\1\0"+
    "\7\100\1\0\27\100\1\0\37\100\1\0\1\100\1\0\4\100\2\0"+
    "\7\100\1\0\47\100\1\0\23\100\16\0\11\101\56\0\125\100\14\0"+
    "\u026c\100\2\0\10\100\12\0\32\100\5\0\113\100\225\0\64\100\40\101"+
    "\7\0\1\100\4\0\12\101\41\0\4\101\1\0\12\101\6\0\130\100"+
    "\10\0\51\100\1\101\u0556\0\234\100\4\0\132\100\6\0\26\100\2\0"+
    "\6\100\2\0\46\100\2\0\6\100\2\0\10\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\37\100\2\0\65\100\1\0\7\100\1\0"+
    "\1\100\3\0\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0"+
    "\15\100\5\0\3\100\1\0\7\100\17\0\4\101\32\0\5\101\20\0"+
    "\2\100\51\0\6\101\17\0\1\100\40\0\20\100\40\0\15\101\4\0"+
    "\1\101\40\0\1\100\4\0\1\100\2\0\12\100\1\0\1\100\3\0"+
    "\5\100\6\0\1\100\1\0\1\100\1\0\1\100\1\0\4\100\1\0"+
    "\3\100\1\0\7\100\46\0\44\100\u0e81\0\3\100\31\0\11\100\6\101"+
    "\1\0\5\100\2\0\3\100\6\0\124\100\4\0\2\101\2\0\2\100"+
    "\2\0\136\100\6\0\50\100\4\0\136\100\21\0\30\100\u0248\0\u19b6\100"+
    "\112\0\u51a6\100\132\0\u048d\100\u0773\0\u2ba4\100\u215c\0\u012e\100\322\0\7\100"+
    "\14\0\5\100\5\0\1\100\1\101\12\100\1\0\15\100\1\0\5\100"+
    "\1\0\1\100\1\0\2\100\1\0\2\100\1\0\154\100\41\0\u016b\100"+
    "\22\0\100\100\2\0\66\100\50\0\14\100\44\0\4\101\17\0\2\100"+
    "\30\0\3\100\31\0\1\100\6\0\3\100\1\0\1\100\1\0\207\100"+
    "\2\0\1\101\4\0\1\100\13\0\12\101\7\0\32\100\4\0\1\100"+
    "\1\0\32\100\12\0\132\100\3\0\6\100\2\0\6\100\2\0\6\100"+
    "\2\0\3\100\3\0\2\100\3\0\2\100\22\0\3\101\4\0";

  /** 
   * Translates characters to character classes
   */  
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    68,   136,   204,   272,   340,   340,   408,   340,   476, 
      544,   612,   680,   748,   816,   884,   952,  1020,  1088,  1156, 
     1224,  1292,  1360,  1428,  1496,  1564,  1632,  1700,  1768,  1836, 
     1904,   340,  1972,  2040,  2108,   340,   340,  2176,  2244,   340, 
      340,  2312,  2380,   340,  2448,   340,   340,   340,   340,   340, 
     2516,  2584,  2652,   340,   340,  2720,  2788,  2856,   340,   340, 
     2924,  2992,  3060,   340,  3128,  3196,  3264,   340,  3332,  3400, 
     3468,   340,  3536,   340,   340,  3604,   340,   340,  3672,  3740, 
     3808,  3876,  3944,  4012,  4080,  4148,  4216,  4284,  4352,  4420, 
     4488,  4556,  4624,  4692,  4760,  4828,  4896,  4964,  5032,  5100, 
     5168,  5236,  5304,   544,  5372,  5440,  5508,  5576,  5644,  5712, 
     5780,  5848,  5916,  5984,  6052,  6120,  6188,  6256,   340,   340, 
      340,   340,   340,   340,  6324,   340,   340,   340,   340,  6392, 
      340,   340,   340,   340,   340,   340,  6460,  6528,  6596,  6664, 
     6732,   340,  6800,  6868,  6936,   340,  7004,   340,   340,   340, 
      340,   340,   340,   340,  7072,   340,   340,  7140,  7208,  7276, 
     7344,  7412,  7480,  7548,  7616,  7684,  7752,   340,   340,  3332, 
     7820,  7888,  7956,  8024,  8092,  8160,  8228,  8296,  8364,  8432, 
     8500,  8568,  8636,  8704,   544,  8772,  8840,  8908,  8976,  9044, 
     9112,  9180,  9248,  9316,  9384,  9452,  9520,  9588,  9656,   544, 
     9724,  9792,  9860,  9928,  9996, 10064, 10132,   544, 10200, 10268, 
    10336, 10404, 10472, 10540, 10608, 10676, 10744, 10812, 10880,   340, 
    10948,   340, 11016, 11084, 11152, 11220, 11288, 11356,   340, 11424, 
      340,   340,   340,   340,   340,   340,   340,   340,  7140,   340, 
    11492, 11560, 11628, 11696, 11764, 11832, 11900, 11968,   544, 12036, 
    12104, 12172,   544, 12240,   544, 12308, 12376,   544,   544, 12444, 
    12512, 12580, 12648,   544, 12716,   544, 12784,   544, 12852, 12920, 
    12988, 13056, 13124, 13192, 13260, 13328, 13396,   544, 13464, 13532, 
    13600, 13668, 13736,   544, 13804, 13872,   340, 13940, 14008, 14076, 
    14144, 14212, 14280, 14348, 14416, 14484, 14552,   544,   544, 14620, 
    14688, 14756, 14824, 14892,   544, 14960,   544,   544, 15028,   544, 
    15096, 15164, 15232, 15300, 15368, 15436, 15504, 15572,   544,   544, 
    15640, 15708, 15776, 15844, 15912, 15980, 16048,   544, 16116, 16184, 
    16252, 16320,   340,   544, 16388,   544, 16456, 16524,   544, 16592, 
      544, 16660,   544, 16728, 16796, 16864,   544, 16932, 17000,   544, 
    17068, 17136,   544, 17204, 17272, 17340, 17408,   544, 17476, 17544, 
    17612, 17680, 17748, 17816, 17884, 17952, 18020,   544, 18088,   544, 
    18156, 18224, 18292, 18360, 18428,   544,   544,   544, 18496,   544, 
    18564,   544,   340,   340, 18632, 18700,   544,   544, 18768, 18836, 
      544,   544, 18904, 18972, 19040, 19108,   544,   340, 19176, 19244, 
      544, 19312,   544, 19380,   544, 19448, 19516,   544,   544,   340, 
    19584,   544
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\3\13\1\27\1\13\1\30\1\31"+
    "\1\13\1\32\1\13\1\33\1\34\1\35\1\13\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\13"+
    "\1\66\1\67\1\70\4\13\2\6\1\12\2\71\1\72"+
    "\1\73\66\71\1\74\7\71\1\75\1\71\2\76\1\77"+
    "\1\100\67\76\1\6\6\76\1\101\1\76\2\102\1\103"+
    "\1\104\63\102\1\105\14\102\2\106\1\107\1\110\100\106"+
    "\107\0\1\11\104\0\1\12\1\0\1\12\1\111\3\0"+
    "\1\111\5\0\1\112\6\0\2\113\20\0\1\114\21\0"+
    "\1\12\1\112\1\0\1\113\3\0\1\12\4\0\4\13"+
    "\1\0\30\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\10\0\1\115\30\0\1\116\46\0\4\13\1\0\1\13"+
    "\1\117\3\13\1\120\22\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\121\6\13"+
    "\1\122\1\123\1\13\1\124\7\13\1\125\1\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\10\13\1\126\10\13\1\127\6\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\2\13\1\130"+
    "\25\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\131\10\13\1\132\13\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\133\3\13\1\134\3\13\1\135\14\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\136\6\13\1\137\1\140\3\13\1\141\13\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\25\13\1\142\2\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\7\13\1\143\20\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\144\1\13\1\145\13\13\1\146\11\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\11\13"+
    "\1\147\6\13\1\150\2\13\1\151\4\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\2\13"+
    "\1\152\4\13\1\153\20\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\154\6\13\1\155"+
    "\1\156\4\13\1\157\12\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\7\13\1\160\20\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\1\161\2\13\1\162\12\13\1\163\11\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\7\13\1\164\5\13\1\165\12\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\14\13\1\166"+
    "\13\13\30\0\1\13\2\0\6\13\1\0\1\13\41\0"+
    "\1\167\103\0\1\170\1\171\102\0\1\172\2\0\1\173"+
    "\100\0\1\174\3\0\1\175\77\0\1\176\103\0\1\177"+
    "\7\0\1\200\36\0\1\114\1\0\1\114\65\0\1\114"+
    "\6\0\1\114\41\0\1\201\13\0\1\202\67\0\1\203"+
    "\103\0\1\204\103\0\1\205\24\0\1\206\1\207\55\0"+
    "\1\210\53\0\1\211\1\0\1\212\1\213\11\0\1\214"+
    "\2\0\1\215\36\0\1\216\17\0\1\217\1\0\1\220"+
    "\1\111\3\0\1\111\5\0\1\112\6\0\2\113\1\221"+
    "\17\0\1\114\21\0\1\220\1\112\1\221\1\113\3\0"+
    "\1\220\2\71\2\0\66\71\1\0\7\71\1\0\1\71"+
    "\3\0\1\73\100\0\3\222\1\0\2\222\1\223\5\222"+
    "\1\224\1\225\1\226\3\222\1\227\6\222\1\230\40\222"+
    "\1\231\1\232\1\233\5\222\1\234\1\233\73\0\1\235"+
    "\13\0\1\100\100\0\3\222\1\0\2\222\1\236\5\222"+
    "\1\237\1\240\1\241\3\222\1\242\6\222\1\243\40\222"+
    "\1\244\1\245\1\246\5\222\1\247\1\246\2\102\2\0"+
    "\63\102\1\0\14\102\3\0\1\104\100\0\2\250\1\103"+
    "\1\104\62\250\1\251\1\252\14\250\2\106\2\0\100\106"+
    "\3\0\1\110\104\0\1\253\1\0\1\253\1\0\1\254"+
    "\40\0\1\254\22\0\1\253\6\0\1\253\4\0\1\114"+
    "\1\0\1\114\1\111\3\0\1\111\14\0\2\113\42\0"+
    "\1\114\2\0\1\113\3\0\1\114\4\0\4\13\1\0"+
    "\1\13\1\255\26\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\13\1\256\26\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\257\2\13\1\260\24\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\11\13\1\261\16\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\7\13\1\262\20\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\24\13\1\263\3\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\15\13\1\264\12\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\13\1\265\26\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\4\13\1\266\23\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\267\23\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\1\270\12\13\1\271\2\13\1\272\11\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\273\11\13\1\274\12\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\2\13\1\275"+
    "\25\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\7\13\1\276\20\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\4\13\1\277"+
    "\23\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\13\1\300\2\13\1\301\23\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\11\13\1\302\16\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\303\27\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\1\304"+
    "\27\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\2\13\1\305\25\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\11\13\1\306"+
    "\16\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\4\13\1\307\23\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\26\13\1\310"+
    "\1\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\10\13\1\311\17\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\1\13\1\312"+
    "\2\13\1\313\23\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\24\13\1\314\3\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\20\13\1\315\7\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\16\13\1\316\11\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\10\13\1\317\17\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\3\13\1\320\24\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\7\13\1\321\20\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\11\13\1\322\16\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\4\13\1\323\23\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\6\13\1\324\21\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\7\13\1\325\5\13\1\326\12\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\5\13\1\327"+
    "\22\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\10\13\1\330\4\13\1\331\12\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\332\24\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\15\13\1\333\12\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\41\0\1\334\3\0"+
    "\1\335\77\0\1\336\54\0\1\337\113\0\1\340\74\0"+
    "\1\341\112\0\1\342\72\0\1\343\76\0\1\217\1\0"+
    "\1\217\1\111\3\0\1\111\14\0\2\113\20\0\1\114"+
    "\21\0\1\217\2\0\1\113\3\0\1\217\4\0\1\217"+
    "\1\0\1\220\1\111\3\0\1\111\5\0\1\112\6\0"+
    "\2\113\20\0\1\114\21\0\1\220\1\112\1\0\1\113"+
    "\3\0\1\220\4\0\4\344\1\0\1\344\1\0\1\344"+
    "\2\0\2\344\10\0\2\344\42\0\1\344\2\0\1\344"+
    "\3\0\1\344\6\0\1\345\65\0\1\345\6\0\1\345"+
    "\6\0\1\223\65\0\1\223\6\0\1\223\6\0\1\346"+
    "\64\0\1\347\1\346\6\0\1\346\73\0\1\350\103\0"+
    "\1\351\103\0\1\352\103\0\1\353\103\0\1\354\103\0"+
    "\1\355\103\0\1\356\16\0\1\357\64\0\1\347\1\357"+
    "\6\0\1\357\73\0\1\360\14\0\1\253\1\0\1\253"+
    "\21\0\2\113\42\0\1\253\2\0\1\113\3\0\1\253"+
    "\4\0\1\253\1\0\1\253\65\0\1\253\6\0\1\253"+
    "\4\0\4\13\1\0\2\13\1\361\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\4\13"+
    "\1\362\23\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\4\13\1\363\23\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\15\13"+
    "\1\364\12\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\6\13\1\365\21\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\3\13"+
    "\1\366\24\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\367\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\4\13"+
    "\1\370\23\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\371\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\2\13"+
    "\1\372\25\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\16\13\1\373\11\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\11\13"+
    "\1\374\16\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\375\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\7\13"+
    "\1\376\20\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\1\13\1\377\26\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\1\u0100"+
    "\27\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\10\13\1\u0101\17\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\2\13\1\u0102"+
    "\25\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\2\13\1\u0103\25\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\6\13\1\u0104"+
    "\21\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\13\1\u0105\2\13\1\u0106\23\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\13\1\u0107\26\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\3\13\1\u0108\24\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\u0109\24\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\22\13\1\u010a\5\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\15\13\1\u010b\12\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\10\13\1\u010c\17\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\4\13\1\u010d\23\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\2\13\1\u010e\25\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\7\13\1\u010f\1\u0110\17\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\u0111\27\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\5\13\1\u0112\22\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\13\1\u0113\26\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\u0114\27\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\1\u0115\27\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\7\13\1\u0116"+
    "\20\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\12\13\1\u0117\15\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\4\13\1\u0118"+
    "\23\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\25\13\1\u0119\2\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\10\13\1\u011a"+
    "\17\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\u011b\27\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\17\13\1\u011c\10\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\4\13\1\u011d\23\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\u011e\17\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\41\0\1\u011f"+
    "\54\0\1\u0120\103\0\1\u0121\162\0\1\u0122\50\0\1\u0123"+
    "\73\0\1\u0124\61\0\4\344\1\0\1\344\1\0\1\344"+
    "\2\0\2\344\1\0\1\112\6\0\2\344\42\0\1\344"+
    "\1\112\1\0\1\344\3\0\1\344\73\0\1\347\14\0"+
    "\4\13\1\0\3\13\1\u0125\24\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\3\13\1\u0126"+
    "\24\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\15\13\1\u0127\12\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\6\13\1\u0128"+
    "\21\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\14\13\1\u0129\13\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\4\13\1\u012a"+
    "\23\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\u012b\24\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\6\13\1\u012c"+
    "\21\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\11\13\1\u012d\16\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\3\13\1\u012e"+
    "\24\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\13\1\u012f\26\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\26\13\1\u0130"+
    "\1\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\12\13\1\u0131\15\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\2\13\1\u0132"+
    "\25\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\14\13\1\u0133\13\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\4\13\1\u0134"+
    "\23\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\15\13\1\u0135\12\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\1\13\1\u0136"+
    "\26\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\3\13\1\u0137\24\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\25\13\1\u0138"+
    "\2\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\u0139\27\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\3\13\1\u013a\24\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\3\13\1\u013b\24\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\2\13\1\u013c\25\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\16\13\1\u013d\11\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\u013e\17\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\2\13\1\u013f\25\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\u0140\23\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\10\13\1\u0141\17\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\u0142\27\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\2\13\1\u0143\25\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\u0144\27\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\15\13"+
    "\1\u0145\12\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\4\13\1\u0146\23\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\16\13"+
    "\1\u0147\11\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\u0148\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\13\0\1\u0149\117\0\1\u014a"+
    "\103\0\1\u014b\65\0\1\u014c\113\0\1\u014d\66\0\4\13"+
    "\1\0\4\13\1\u014e\23\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\1\u014f\27\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\6\13\1\u0150\21\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\4\13\1\u0151\23\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\3\13\1\u0152\24\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\14\13\1\u0153\13\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\17\13\1\u0154\10\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\11\13\1\u0155\16\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\15\13\1\u0156\12\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\1\13\1\u0157\26\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13\4\0\4\13\1\0"+
    "\1\u0158\27\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\11\13\1\u0159\16\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\15\13"+
    "\1\u015a\12\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\u015b\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\11\13"+
    "\1\u015c\16\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\20\13\1\u015d\7\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\4\13"+
    "\1\u015e\23\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\23\13\1\u015f\4\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\10\13"+
    "\1\u0160\17\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\2\13\1\u0161\25\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\10\13"+
    "\1\u0162\17\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\22\13\1\u0163\5\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\6\13"+
    "\1\u0164\21\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\4\13\1\u0165\23\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\6\13"+
    "\1\u0166\21\13\30\0\1\13\2\0\6\13\1\0\1\13"+
    "\4\0\4\13\1\0\15\13\1\u0167\12\13\30\0\1\13"+
    "\2\0\6\13\1\0\1\13\4\0\4\13\1\0\1\u0168"+
    "\27\13\30\0\1\13\2\0\6\13\1\0\1\13\14\0"+
    "\1\u0169\103\0\1\u016a\115\0\1\u016b\71\0\1\u016c\73\0"+
    "\4\13\1\0\6\13\1\u016d\21\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\20\13\1\u016e"+
    "\7\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\7\13\1\u016f\20\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\1\13\1\u0170"+
    "\26\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\2\13\1\u0171\25\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\11\13\1\u0172"+
    "\16\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\16\13\1\u0173\11\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\17\13\1\u0174"+
    "\10\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\6\13\1\u0175\21\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\1\u0176\27\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\2\13\1\u0177\25\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\u0178\23\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\13\13\1\u0179\14\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\2\13\1\u017a\25\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\4\13\1\u017b\23\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\2\13\1\u017c\25\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\10\13\1\u017d\17\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\10\13\1\u017e\17\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\15\0\1\u017f"+
    "\101\0\1\u0180\104\0\1\u0181\115\0\1\u0182\61\0\4\13"+
    "\1\0\4\13\1\u0183\23\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\24\13\1\u0184\3\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\11\13\1\u0185\16\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\11\13\1\u0186\16\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\2\13\1\u0187\25\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\2\13\1\u0188\25\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\2\13\1\u0189\25\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\6\13\1\u018a\21\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\11\13\1\u018b\16\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\2\13\1\u018c\25\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\2\13\1\u018d\25\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\13\0\1\u018e\101\0\1\u018f\76\0\4\13"+
    "\1\0\15\13\1\u0190\12\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\4\13\1\u0191\23\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\7\13\1\u0192\20\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\2\13\1\u0193\25\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\4\0\4\13"+
    "\1\0\4\13\1\u0194\23\13\30\0\1\13\2\0\6\13"+
    "\1\0\1\13\4\0\4\13\1\0\17\13\1\u0195\10\13"+
    "\30\0\1\13\2\0\6\13\1\0\1\13\22\0\1\u0196"+
    "\65\0\4\13\1\0\27\13\1\u0197\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\4\0\4\13\1\0\20\13\1\u0198"+
    "\7\13\30\0\1\13\2\0\6\13\1\0\1\13\4\0"+
    "\4\13\1\0\1\13\1\u0199\26\13\30\0\1\13\2\0"+
    "\6\13\1\0\1\13\15\0\1\u019a\72\0\4\13\1\0"+
    "\2\13\1\u019b\25\13\30\0\1\13\2\0\6\13\1\0"+
    "\1\13\4\0\4\13\1\0\17\13\1\u019c\10\13\30\0"+
    "\1\13\2\0\6\13\1\0\1\13";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();

  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String[] YY_ERROR_MSG = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  9,  9,  1,  1,  9,  9,  1,  1,  9,  1,  9,  9,  9, 
     9,  9,  1,  1,  1,  9,  9,  1,  1,  1,  9,  9,  1,  1,  1,  9, 
     1,  1,  1,  9,  1,  1,  1,  9,  0,  9,  9,  1,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  1,  9,  9,  9, 
     9,  1,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  9,  0,  1, 
     0,  9,  1,  9,  9,  9,  9,  9,  9,  9,  1,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  0,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  0,  0, 
     0,  0,  0,  1,  9,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  9,  1,  1
  };

  /** the input buffer */
  private org.caesarj.compiler.tools.antlr.extra.InputBuffer buffer;

  /** the input device : unused but referenced by generated constructors */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] yy_buffer = null;

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  public KjcScanner(Compiler compiler, InputBuffer buffer) {
    super(compiler, buffer);
    this.buffer = buffer;
  }

  /**
   * Creates a character literal token.
   */
  private CToken buildCharacterLiteral(char image) {
    return new CToken(CHARACTER_LITERAL, String.valueOf(image));
  }


  private final StringBuffer	string = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KjcScanner(java.io.Reader in) {
    // dummy: we provide our own constructor
  super(null, null);
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KjcScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[19652];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1658) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) { return yy_buffer[yy_currentPos++]; }

    /* if the eof is reached, we don't need to work hard */
    if (yy_atEOF) { return YYEOF; }

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char[]  newBuffer = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = buffer.read(yy_buffer, yy_endRead, yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) { return YYEOF; }

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

  /**
   * Exports the buffer state.
   */
  public org.caesarj.compiler.tools.antlr.extra.InputBufferState getBufferState() {
    org.caesarj.compiler.tools.antlr.extra.InputBufferState	state;

    state = new org.caesarj.compiler.tools.antlr.extra.InputBufferState(yy_buffer,
								   yy_startRead,
								   yy_endRead,
								   yy_currentPos,
								   yy_markedPos,
								   yy_pushbackPos,
								   yy_atEOF);
    // invalidate buffer
    yy_buffer = null;
    return state;
  }

  /**
   * Imports the buffer state, if exists, otherwise initialise buffer.
   */
  private void initBufferState() {
    org.caesarj.compiler.tools.antlr.extra.InputBufferState	state;

    state = buffer.getBufferState(this);
    if (state == null) {
      yy_buffer = new char[YY_BUFFERSIZE];
      // other variables initialised to their default values
    } else {
      yy_buffer = state.buffer;
      yy_startRead = state.startRead;
      yy_endRead = state.endRead;
      yy_currentPos = state.currentPos;
      yy_markedPos = state.markedPos;
      yy_pushbackPos = state.pushbackPos;
      yy_atEOF = state.atEOF;
    }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null) {
      yy_reader.close();
    }
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() ) {
      yy_ScanError(YY_PUSHBACK_2BIG);
    }

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.caesarj.compiler.tools.antlr.runtime.Token nextTokenImpl() throws java.io.IOException {
    int yy_input;
    int yy_action;


    if (yy_buffer == null) {
      initBufferState();
    }

    while (true) {

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) { break yy_forAction; }

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state;
            yy_markedPos = yy_currentPos;
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {

        case 411: 
          {  return TOKEN_LITERAL_synchronized;  }
        case 413: break;
        case 409: 
          {  return TOKEN_INVARIANT;  }
        case 414: break;
        case 408: 
          {  return TOKEN_LITERAL_implements;  }
        case 415: break;
        case 407: 
          {  return TOKEN_LITERAL_instanceof;  }
        case 416: break;
        case 404: 
          {  return TOKEN_LITERAL_protected;  }
        case 417: break;
        case 402: 
          {  return TOKEN_LITERAL_interface;  }
        case 418: break;
        case 400: 
          {  return TOKEN_LITERAL_transient;  }
        case 419: break;
        case 397: 
          {  return TOKEN_REQUIRE;  }
        case 420: break;
        case 396: 
          {  return TOKEN_LITERAL_volatile;  }
        case 421: break;
        case 391: 
          {  return TOKEN_LITERAL_override;  }
        case 422: break;
        case 390: 
          {  return TOKEN_LITERAL_continue;  }
        case 423: break;
        case 387: 
          {  return TOKEN_LITERAL_strictfp;  }
        case 424: break;
        case 386: 
          {  return TOKEN_LITERAL_abstract;  }
        case 425: break;
        case 383: 
          {  return TOKEN_ENSURE;  }
        case 426: break;
        case 382: 
          {  return TOKEN_ATASSERT;  }
        case 427: break;
        case 381: 
          {  return TOKEN_LITERAL_virtual;  }
        case 428: break;
        case 379: 
          {  return TOKEN_LITERAL_private;  }
        case 429: break;
        case 377: 
          {  return TOKEN_LITERAL_package;  }
        case 430: break;
        case 376: 
          {  return TOKEN_LITERAL_finally;  }
        case 431: break;
        case 375: 
          {  return TOKEN_LITERAL_default;  }
        case 432: break;
        case 369: 
          {  return TOKEN_LITERAL_boolean;  }
        case 433: break;
        case 367: 
          {  return TOKEN_LITERAL_extends;  }
        case 434: break;
        case 357: 
          {  return TOKEN_LITERAL_public;  }
        case 435: break;
        case 352: 
          {  return TOKEN_LITERAL_double;  }
        case 436: break;
        case 349: 
          {  return TOKEN_LITERAL_import;  }
        case 437: break;
        case 346: 
          {  return TOKEN_LITERAL_native;  }
        case 438: break;
        case 342: 
          {  return TOKEN_LITERAL_throws;  }
        case 439: break;
        case 340: 
          {  return TOKEN_LITERAL_return;  }
        case 440: break;
        case 338: 
          {  return TOKEN_LITERAL_switch;  }
        case 441: break;
        case 335: 
          {  return TOKEN_LITERAL_static;  }
        case 442: break;
        case 332: 
          {  return TOKEN_ATFAIL;  }
        case 443: break;
        case 327: 
          {  return TOKEN_LITERAL_while;  }
        case 444: break;
        case 320: 
          {  return TOKEN_LITERAL_final;  }
        case 445: break;
        case 319: 
          {  return TOKEN_LITERAL_float;  }
        case 446: break;
        case 318: 
          {  return TOKEN_LITERAL_false;  }
        case 447: break;
        case 309: 
          {  return TOKEN_LITERAL_class;  }
        case 448: break;
        case 307: 
          {  return TOKEN_LITERAL_const;  }
        case 449: break;
        case 306: 
          {  return TOKEN_LITERAL_catch;  }
        case 450: break;
        case 304: 
          {  return TOKEN_LITERAL_break;  }
        case 451: break;
        case 303: 
          {  return TOKEN_LITERAL_throw;  }
        case 452: break;
        case 298: 
          {  return TOKEN_LITERAL_super;  }
        case 453: break;
        case 297: 
          {  return TOKEN_LITERAL_short;  }
        case 454: break;
        case 286: 
          {  return TOKEN_BSR_ASSIGN;  }
        case 455: break;
        case 283: 
          {  return TOKEN_LITERAL_void;  }
        case 456: break;
        case 277: 
          {  return TOKEN_LITERAL_goto;  }
        case 457: break;
        case 267: 
          {  return TOKEN_LITERAL_null;  }
        case 458: break;
        case 265: 
          {  return TOKEN_LITERAL_long;  }
        case 459: break;
        case 263: 
          {  return TOKEN_LITERAL_char;  }
        case 460: break;
        case 258: 
          {  return TOKEN_LITERAL_case;  }
        case 461: break;
        case 257: 
          {  return TOKEN_LITERAL_byte;  }
        case 462: break;
        case 254: 
          {  return TOKEN_LITERAL_this;  }
        case 463: break;
        case 252: 
          {  return TOKEN_LITERAL_true;  }
        case 464: break;
        case 248: 
          {  return TOKEN_LITERAL_else;  }
        case 465: break;
        case 239: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\\');  }
        case 466: break;
        case 237: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\'');  }
        case 467: break;
        case 236: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\"');  }
        case 468: break;
        case 235: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\f');  }
        case 469: break;
        case 234: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\n');  }
        case 470: break;
        case 233: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\b');  }
        case 471: break;
        case 232: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\t');  }
        case 472: break;
        case 231: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\r');  }
        case 473: break;
        case 221: 
          {  return TOKEN_SL_ASSIGN;  }
        case 474: break;
        case 220: 
          {  return TOKEN_BSR;  }
        case 475: break;
        case 219: 
          {  return TOKEN_SR_ASSIGN;  }
        case 476: break;
        case 207: 
          {  return TOKEN_LITERAL_for;  }
        case 477: break;
        case 202: 
          {  return TOKEN_LITERAL_int;  }
        case 478: break;
        case 199: 
          {  return TOKEN_LITERAL_new;  }
        case 479: break;
        case 184: 
          {  return TOKEN_LITERAL_try;  }
        case 480: break;
        case 156: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral(yytext().charAt(0));  }
        case 481: break;
        case 62: 
        case 63: 
          {  reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "character literal" });  }
        case 482: break;
        case 59: 
          {  yybegin(YYINITIAL); return new CToken(STRING_LITERAL, string.toString());  }
        case 483: break;
        case 57: 
        case 58: 
          {  reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "string literal" });  }
        case 484: break;
        case 56: 
        case 65: 
        case 69: 
        case 167: 
          {  string.append(yytext());  }
        case 485: break;
        case 54: 
          {  yybegin(CHARLITERAL);  }
        case 486: break;
        case 53: 
          {  yybegin(STRINGLITERAL); string.setLength(0);  }
        case 487: break;
        case 51: 
          {  return TOKEN_STAR;  }
        case 488: break;
        case 50: 
          {  return TOKEN_SLASH;  }
        case 489: break;
        case 49: 
          {  return TOKEN_SEMI;  }
        case 490: break;
        case 48: 
          {  return TOKEN_RPAREN;  }
        case 491: break;
        case 47: 
          {  return TOKEN_RCURLY;  }
        case 492: break;
        case 46: 
          {  return TOKEN_RBRACK;  }
        case 493: break;
        case 45: 
          {  return TOKEN_QUESTION;  }
        case 494: break;
        case 44: 
          {  return TOKEN_PERCENT;  }
        case 495: break;
        case 43: 
          {  return TOKEN_LPAREN;  }
        case 496: break;
        case 42: 
          {  return TOKEN_LNOT;  }
        case 497: break;
        case 41: 
          {  return TOKEN_LT;  }
        case 498: break;
        case 40: 
          {  return TOKEN_LCURLY;  }
        case 499: break;
        case 30: 
          {  return TOKEN_BAND;  }
        case 500: break;
        case 29: 
          {  return TOKEN_ASSIGN;  }
        case 501: break;
        case 11: 
          {  return TOKEN_PLUS;  }
        case 502: break;
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 105: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 249: 
        case 250: 
        case 251: 
        case 253: 
        case 255: 
        case 256: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 264: 
        case 266: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 284: 
        case 285: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 305: 
        case 308: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 334: 
        case 336: 
        case 337: 
        case 339: 
        case 341: 
        case 343: 
        case 344: 
        case 345: 
        case 347: 
        case 348: 
        case 350: 
        case 351: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 358: 
        case 359: 
        case 364: 
        case 365: 
        case 366: 
        case 368: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 378: 
        case 380: 
        case 388: 
        case 389: 
        case 392: 
        case 393: 
        case 394: 
        case 395: 
        case 399: 
        case 401: 
        case 403: 
        case 406: 
        case 410: 
          {  return new CToken(IDENT, yytext().intern());  }
        case 503: break;
        case 9: 
        case 55: 
        case 73: 
        case 143: 
        case 227: 
          {  return new CToken(INTEGER_LITERAL, yytext());  }
        case 504: break;
        case 7: 
        case 8: 
          {  incrementLine();  }
        case 505: break;
        case 6: 
          {  /* ignore */  }
        case 506: break;
        case 5: 
        case 52: 
        case 60: 
        case 61: 
        case 64: 
        case 68: 
          {  reportTrouble(CompilerMessages.ILLEGAL_CHAR, new Object[]{ yytext() });  }
        case 507: break;
        case 31: 
          {  return TOKEN_BNOT;  }
        case 508: break;
        case 32: 
          {  return TOKEN_BOR;  }
        case 509: break;
        case 33: 
          {  return TOKEN_GT;  }
        case 510: break;
        case 34: 
          {  return TOKEN_BXOR;  }
        case 511: break;
        case 35: 
          {  return TOKEN_COLON;  }
        case 512: break;
        case 36: 
          {  return TOKEN_COMMA;  }
        case 513: break;
        case 37: 
          {  return TOKEN_MINUS;  }
        case 514: break;
        case 38: 
          {  return TOKEN_DOT;  }
        case 515: break;
        case 39: 
          {  return TOKEN_LBRACK;  }
        case 516: break;
        case 74: 
        case 75: 
        case 170: 
          {  return new CToken(REAL_LITERAL, yytext());  }
        case 517: break;
        case 76: 
          {  return TOKEN_INC;  }
        case 518: break;
        case 77: 
          {  return TOKEN_PLUS_ASSIGN;  }
        case 519: break;
        case 103: 
          {  return TOKEN_LITERAL_if;  }
        case 520: break;
        case 106: 
          {  return TOKEN_LITERAL_do;  }
        case 521: break;
        case 118: 
          {  return TOKEN_EQUAL;  }
        case 522: break;
        case 119: 
          {  return TOKEN_BAND_ASSIGN;  }
        case 523: break;
        case 120: 
          {  return TOKEN_LAND;  }
        case 524: break;
        case 121: 
          {  return TOKEN_BOR_ASSIGN;  }
        case 525: break;
        case 122: 
          {  return TOKEN_LOR;  }
        case 526: break;
        case 123: 
          {  return TOKEN_GE;  }
        case 527: break;
        case 124: 
          {  return TOKEN_SR;  }
        case 528: break;
        case 125: 
          {  return TOKEN_BXOR_ASSIGN;  }
        case 529: break;
        case 126: 
          {  return TOKEN_MINUS_ASSIGN;  }
        case 530: break;
        case 127: 
          {  return TOKEN_DEC;  }
        case 531: break;
        case 128: 
          {  return TOKEN_LE;  }
        case 532: break;
        case 129: 
          {  return TOKEN_SL;  }
        case 533: break;
        case 130: 
          {  return TOKEN_NOT_EQUAL;  }
        case 534: break;
        case 131: 
          {  return TOKEN_PERCENT_ASSIGN;  }
        case 535: break;
        case 132: 
          {  return TOKEN_SLASH_ASSIGN;  }
        case 536: break;
        case 133: 
          {  yybegin(ENDOFLINECOMMENT); string.setLength(0);  }
        case 537: break;
        case 134: 
          {  yybegin(TRADITIONALCOMMENT); string.setLength(0);  }
        case 538: break;
        case 135: 
          {  return TOKEN_STAR_ASSIGN;  }
        case 539: break;
        case 141: 
          {  return TOKEN_ATAT;  }
        case 540: break;
        case 145: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
          {  reportTrouble(CompilerMessages.BAD_ESCAPE_SEQUENCE, new Object[]{ yytext() });  }
        case 541: break;
        case 147: 
          {  string.append('\r');  }
        case 542: break;
        case 148: 
          {  string.append('\t');  }
        case 543: break;
        case 149: 
          {  string.append('\b');  }
        case 544: break;
        case 150: 
          {  string.append('\n');  }
        case 545: break;
        case 151: 
          {  string.append('\f');  }
        case 546: break;
        case 152: 
          {  string.append('\"');  }
        case 547: break;
        case 153: 
          {  string.append('\'');  }
        case 548: break;
        case 155: 
          {  string.append('\\');  }
        case 549: break;
        case 333: 
          {  
				  if (getCompiler().getSourceVersion() >=  KjcEnvironment.SOURCE_1_4) { 
				    return TOKEN_JAVAASSERT; 
				  } else { 
				    reportTrouble(new CWarning(getTokenReference(),
					                       KjcMessages.ASSERT_AS_IDENTIFIER));
				    return new CToken(IDENT, yytext().intern()); 
				  } 
				 }
        case 550: break;
        case 230: 
          { 
				  yybegin(YYINITIAL);

				  int		val;

				  val = Integer.parseInt(yytext().substring(1, yylength()-1), 8);
				  return buildCharacterLiteral((char)val);
				 }
        case 551: break;
        case 168: 
          { 
				  yybegin(YYINITIAL);

				  if (string.length() > 0 && string.charAt(0) == '*') {
				    //!!! graf 001222: first '*' should be removed
				    addComment(new JavadocComment(string.toString(), false, false));
				  } else {
				    addComment(new JavaStyleComment(string.toString(), false, false, false));
				  }
				 }
        case 552: break;
        case 66: 
        case 67: 
          { 
				  incrementLine();
				  string.append(yytext());
				 }
        case 553: break;
        case 70: 
        case 71: 
          { 
				  yybegin(YYINITIAL);
				  incrementLine();
				  addComment(new JavaStyleComment(string.toString(), true, false, false));
				 }
        case 554: break;
        case 146: 
        case 154: 
        case 228: 
          { 
				  int		val;

				  val = Integer.parseInt(yytext().substring(1), 8);
				  string.append((char)val);
				 }
        case 555: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case TRADITIONALCOMMENT:
              { 
				  reportTrouble(CompilerMessages.EOF_IN_TRADITIONAL_COMMENT, null);
				  return TOKEN_EOF;
				 }
            case 413: break;
            case ENDOFLINECOMMENT:
              { 
				  reportTrouble(new CWarning(getTokenReference(),
							     CompilerMessages.EOF_IN_ENDOFLINE_COMMENT));
				  return TOKEN_EOF;
				 }
            case 414: break;
            default:
              {   return TOKEN_EOF;
 }
            }
          } else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }
}
