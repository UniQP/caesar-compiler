package org.caesarj.compiler.ast;

import org.caesarj.compiler.CciConstants;
import org.caesarj.compiler.JavadocComment;
import org.caesarj.compiler.PositionedError;
import org.caesarj.compiler.TokenReference;
import org.caesarj.kjc.CContext;
import org.caesarj.kjc.CReferenceType;
import org.caesarj.kjc.CTypeVariable;
import org.caesarj.kjc.JFieldDeclaration;
import org.caesarj.kjc.JMethodDeclaration;
import org.caesarj.kjc.JPhylum;
import org.caesarj.kjc.JTypeDeclaration;

/**
 * The proxies of the collaboration interfaces are the implementations of the
 * CI. The weavelets will extend these classes to have the implementation of 
 * alll CI's methods.
 * 
 * @author Walter Augusto Werner
 */
public class CciCollaborationInterfaceProxyDeclaration
	extends FjClassDeclaration
{
	private String collaborationInterfaceName;
	
	/**
	 * Are the setting methods already added?
	 */
	protected boolean settingMethodsAdded;
	
	/**
	 * @param where
	 * @param modifiers
	 * @param ident
	 * @param typeVariables
	 * @param superClass
	 * @param interfaces
	 * @param fields
	 * @param methods
	 * @param inners
	 */
	public CciCollaborationInterfaceProxyDeclaration(
		TokenReference where,
		int modifiers,
		String ident,
		CTypeVariable[] typeVariables,
		CReferenceType superClass,
		CReferenceType[] interfaces,
		JFieldDeclaration[] fields,
		JMethodDeclaration[] methods,
		JTypeDeclaration[] inners,
		String collaborationInterfaceName)
	{
		super(
			where,
			modifiers,
			ident,
			typeVariables,
			superClass,
			interfaces,
			null,
			fields,
			methods,
			inners,
			new JPhylum[0],
			new JavadocComment("This class was automatically " +				"generated by CaesarJ.", true, true),
			null);
		
		this.collaborationInterfaceName = collaborationInterfaceName;
	
	}
	
	
	/**
	* For the proxies it is not allowed to add the implementations. So, 
	* the method was overriden for do nothing :).
	*/
	protected void addImplementation(CReferenceType ownerCi)
	{
	}
	
	
	/**
	* We've aready inserted the fields for the proxies.
	*/
//	protected void addCrossReferenceField(String typeName, String fieldName)
//	{
//	}

	/**
	* We don't need to initializate the implementation reference for the 
	* proxies. It doesn't have neither implementation nor binding.
	*/
	protected void initImplemetation(CContext context) throws PositionedError
	{
	}

	/* (non-Javadoc)
	 * @see org.caesarj.kjc.JTypeDeclaration#join(org.caesarj.kjc.CContext)
	 */
	public void join(CContext context) throws PositionedError
	{
		if (! settingMethodsAdded)
		{
			settingMethodsAdded = true;
			addSettingMethod(
				collaborationInterfaceName, 
				CciConstants.BINDING_FIELD_NAME, 
				context.getTypeFactory());
				
			addSettingMethod(
				collaborationInterfaceName, 
				CciConstants.IMPLEMENTATION_FIELD_NAME, 
				context.getTypeFactory());
		}
		super.join(context);
	}
}
