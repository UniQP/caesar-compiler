package org.caesarj.compiler;

import org.caesarj.kjc.CClassNameType;
import org.caesarj.kjc.CReferenceType;

/**
 * @author Walter Augusto Werner
 */
public class CciConstants
	extends FjConstants
{
	public static final String ORDINARY_PARAMETER_PREFIX = 
		(SEPERATOR + "param").intern();
	public static final int DEFAULT_NUMERIC_RETURN = 0;
	public static final boolean DEFAULT_BOOLEAN_RETURN = false;
	public static final String PROVIDING_NAME = 
		(SEPERATOR + "providing").intern();
	public static final String PROVIDING_REFERENCE_NAME = 
		(PROVIDING_NAME + "Reference").intern();	 
	public static final String BINDING_NAME = 
		(SEPERATOR + "binding").intern();
	public static final String ACCESSOR_PREFIX =
		(SEPERATOR + "get").intern(); 
	public static final String SETTING_PREFIX = 
		(SEPERATOR + "set").intern(); 
		

	public static final String DEFAULT_CAESAR_JAVADOC_TEXT = 
		"Automatically Generated by Caesar: ";

	public static final String KEY_TRANSFORMER_METHOD_NAME = 
		("transform").intern(); 


	protected static final String WRAPPER_CREATION_PREFIX = 
		(SEPERATOR + "getWrapper").intern(); 
	public static final String WRAPPER_LOCAL_VAR = 
		(SEPERATOR + "localWrapper").intern(); 
	public static final String WRAPPER_LOCAL_KEY = 
		(SEPERATOR + "localKey").intern(); 
	public static final String WRAPPER_MAP_ACCESS = 
		("get").intern(); 
	public static final String WRAPPER_MAP_PUT = 
		("put").intern(); 
	public static final String WRAPPEE_FIELD_NAME = 
		("wrappee").intern(); 

	public static final String WRAPPEE_PARAMETER_NAME = 
		(SEPERATOR + "internalWrappee").intern(); 		

	public static final String WRAPPEE_METHOD_NAME = 
		toAccessorMethodName(WRAPPEE_FIELD_NAME).intern();		


	protected static final String ADAPT_METHOD_NAME = 
		(SEPERATOR + "adapt").intern();
	
	public static final String ADAPT_METHOD_PARAM_NAME = 
		(SEPERATOR + "enclosing").intern();
		
	public static final String ADAPT_METHOD_RECEIVER_PARAM_NAME = 
		(SEPERATOR + "receiver").intern();		

	public static final CReferenceType WRAPPER_MAP_TYPE = 
		new CClassNameType("java/util/WeakHashMap".intern());
	public static final String WRAPPER_KEY_CLASS_NAME = 
			"org/caesarj/runtime/WrapperKey".intern();		
	public static final CReferenceType WRAPPER_KEY_TYPE = 
		new CClassNameType(WRAPPER_KEY_CLASS_NAME);

		
				
	public static final JavadocComment WRAPPER_MAP_JAVADOC = 
		new JavadocComment(
			toCaesarJavadocText("Wrapping recycling map."), true, false);
	public static final JavadocComment WRAPPER_CREATION_JAVADOC = 
		new JavadocComment(
			toCaesarJavadocText("Wrapping recycling accessor/factory."), 
			true, false);
	public static final JavadocComment WRAPPEE_FIELD_JAVADOC = 
		new JavadocComment(
			toCaesarJavadocText("The wrappee reference."), true, false);
	public static final JavadocComment WRAPPER_CONSTRUCTOR_JAVADOC = 
		new JavadocComment(
			toCaesarJavadocText("Wrapper constructor, " +				"it receives a wreppee reference."), true, false);

	public static final JavadocComment ADAPT_METHOD_JAVADOC = 
		new JavadocComment(
			toCaesarJavadocText("Adapts the current object to the right type."), 
			true, false);

	
	private static String fixName(String name)
	{
		if (name.startsWith("_"))
			name = name.substring(1);
		return name.substring(0, 1).toUpperCase() + name.substring(1);
	}
	
	public static String toCaesarJavadocText(String text)
	{
		return DEFAULT_CAESAR_JAVADOC_TEXT + text;
	}
	
	public static String toWrapperMapName(String bindingType)
	{
		return (SEPERATOR + bindingType.substring(0, 1).toLowerCase() 
			+ bindingType.substring(1)).intern();
	}

	public static String toWrapperMethodCreationName(String bindingType)
	{
		return (WRAPPER_CREATION_PREFIX + bindingType).intern();
	}
	
	
	public static String toAdaptMethodName(String virtualType)
	{
		return (ADAPT_METHOD_NAME + virtualType).intern();
	}
	public static boolean isAdaptMethodName(String name)
	{
		return name.startsWith(ADAPT_METHOD_NAME);
	}	
	public static String toAccessorMethodName(String name)
	{
		return ACCESSOR_PREFIX + fixName(name);
	}
	public static String toSettingMethodName(String name)
	{
		return SETTING_PREFIX + fixName(name);
	}
	
	public static boolean isSettingMethodName(String name)
	{
		return toSettingMethodName(PROVIDING_NAME).equals(name)
				|| toSettingMethodName(BINDING_NAME).equals(name);
	}
	public static String toBaseMethodName(String methodName)
	{
		methodName = methodName.replaceAll( SELFCONTEXT_METHOD_SUFFIX, "" );
		methodName = methodName.replaceAll( IMPLEMENTATION_METHOD_SUFFIX, "" );
		methodName = methodName.replaceAll( SEPERATOR, "" );
		return methodName;
	}

	public static String removeCaesarInternalNames(String message) {
		message = FjConstants.removeFamilyJ(message);
		message = message.replaceAll(WRAPPER_CREATION_PREFIX, "" );
		return message;
	}
		

}
