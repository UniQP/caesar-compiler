// Generated by msggen from CaesarMessages.msg
package org.caesarj.compiler;

import org.caesarj.util.MessageDescription;

public interface CaesarMessages extends org.caesarj.compiler.CompilerMessages {
  MessageDescription	FJ_IMPL_WITHOUT_FJ_PARSER = new MessageDescription("FamilyJ implementations e.g. FjVisitors are only compatible to a FjParser", "WRONG PARSER", 0);
  MessageDescription	CLEAN_CLASS_NO_INNER = new MessageDescription("clean classes may not be inners", "FJLS 1.1", 0);
  MessageDescription	MODIFIERS_INNER_CLASSES_ONLY = new MessageDescription("\"{0}\" can only be applied to inner classes", "FJLS 1.2", 0);
  MessageDescription	METHOD_VISIBILITY_IN_CLEAN_CLASS = new MessageDescription("clean, virtual or override class method \"{0}\" must have public or private visibility", "FJLS 1.3", 0);
  MessageDescription	CLEAN_JUST_PRIVATE_FIELDS = new MessageDescription("clean, virtual or override class field \"{0}\" must have private visibility", "FJLS 1.4", 0);
  MessageDescription	CLEAN_NO_NON_CLEAN_MEMBER = new MessageDescription("clean, virtual or override class may not declare non-clean inner \"{0}\"", "FJLS 1.5", 0);
  MessageDescription	CLEAN_INHERITS_NON_CLEAN = new MessageDescription("clean, virtual or override class may not inherit non clean class \"{0}\"", "FJLS 1.6", 0);
  MessageDescription	NON_CLEAN_INHERITS_CLEAN = new MessageDescription("non clean or virtual class may not inherit clean class \"{0}\"", "FJLS 1.7", 0);
  MessageDescription	CLEAN_ABSTRACT_CLASS = new MessageDescription("clean, virtual or override class may not be declared abstract", "FJLS 1.8", 0);
  MessageDescription	CLEAN_CLASS_THISCALL = new MessageDescription("clean, virtual or override class constructors may not issue this constructor calls", "FJLS 1.9", 0);
  MessageDescription	MISSING_CONSTRUCTOR = new MessageDescription("constructor \"{0}\" is not defined by class \"{1}\" and has been inherited", "FJLS 1.10", 2);
  MessageDescription	NO_MATCHING_OVERRIDDEN_CLASS = new MessageDescription("overridden class not found", "FJLS 1.11", 0);
  MessageDescription	MUST_BE_VIRTUAL = new MessageDescription("class \"{0}\" must be declared virtual", "FJLS 1.12", 0);
  MessageDescription	FINAL_REFERENCE_NEEDED = new MessageDescription("\"{0}\" has to be a final reference", "FJLS 2.1", 0);
  MessageDescription	PRIVATE_REFERENCE_NEEDED = new MessageDescription("reference to \"{0}\" has to be private", "FJLS 2.2", 0);
  MessageDescription	WRONG_FAMILY = new MessageDescription("expected family \"{0}\" found \"{1}\"", "FJLS 2.3", 0);
  MessageDescription	NO_THIS_FAMILY = new MessageDescription("receiver of method \"{0}\" cannot act as family", "FJLS 2.4", 0);
  MessageDescription	NO_OUTERTHIS_FAMILY = new MessageDescription("no family declared for receiver of method \"{0}\"", "FJLS 2.5", 0);
  MessageDescription	WEAVING_STARTED = new MessageDescription("[ weaving started ]", null, 4);
  MessageDescription	WEAVING_ENDED = new MessageDescription("[ weaving ended ]", null, 4);
  MessageDescription	WROTE_CLASS_FILE = new MessageDescription("[ wrote class file: {0} ]", null, 4);
  MessageDescription	WEAVING_FAILED = new MessageDescription("weaving failed", null, 0);
  MessageDescription	PROCEED_OUTSIDE_AROUND_ADVICE = new MessageDescription("proceed() can only be used inside an around-advice", null, 0);
  MessageDescription	ADVICE_FLAGS = new MessageDescription("only strictfp modifier allowed for Advices", null, 0);
  MessageDescription	WEAVER_ERROR = new MessageDescription("{0}", null, 0);
  MessageDescription	ASPECTJ_ERROR = new MessageDescription("{0}", null, 0);
  MessageDescription	ASPECTJ_WARNING = new MessageDescription("{0}", null, 2);
  MessageDescription	POINTCUTS_OR_ADVICES_IN_NON_CROSSCUTTING_CLASS = new MessageDescription("pointcuts and advices may be declared in crosscutting or statically deployed classes only", null, 0);
  MessageDescription	DEPLOYED_CLASS_CONSTRUCTOR_NON_PRIVATE_OR_WITH_PARAMETER = new MessageDescription("the constructor of a statically deployed class must be private and must not have any parameters", null, 0);
  MessageDescription	DEPLOYED_FIELD_NOT_FINAL_AND_STATIC = new MessageDescription("statically deployed fields must be declared final and static", null, 0);
  MessageDescription	DEPLOYED_CLASS_NOT_CROSSCUTTING = new MessageDescription("only instances of crosscutting classes can be deployed", null, 0);
  MessageDescription	DESCENDANT_OF_CROSSCUTTING_CLASS_NOT_DECLARED_CROSSCUTTING = new MessageDescription("descendants of crosscutting classes must be declared crosscutting", null, 0);
  MessageDescription	PROVIDED_METHOD_FLAGS = new MessageDescription("Provided method flags in \"{0}\" must be some of: provided, public, abstract", null, 0);
  MessageDescription	EXPECTED_METHOD_FLAGS = new MessageDescription("Expected method flags in \"{0}\" must be some of: expected, public, abstract", null, 0);
  MessageDescription	PROVIDED_AND_EXPECTED_METHOD = new MessageDescription("Method \"{0}\" cannot be provided and expected.", null, 0);
  MessageDescription	COLLABORATION_METHOD_OUT_CI = new MessageDescription("The method \"{0}\" must be defined in a collaboration interaface.", null, 0);
  MessageDescription	CI_METHOD_FLAGS = new MessageDescription("Method \"{0}\" must be provided or expected.", null, 0);
  MessageDescription	NON_CI = new MessageDescription("Interface \"{0}\" must be a collaboration interface.", null, 0);
  MessageDescription	EXPECTED_METHOD_IN_PROVIDING = new MessageDescription("Expected method \"{0}\" cannot be implemented in a providing class.", null, 0);
  MessageDescription	PROVIDED_METHOD_IN_BINDING = new MessageDescription("Provided method \"{0}\" cannot be implemented in a binding class.", null, 0);
  MessageDescription	MUST_IMPLEMENT_EXPECTED_METHOD = new MessageDescription("Expected method \"{0}\" must be implemented by the binding class \"{1}\".", null, 0);
  MessageDescription	MUST_IMPLEMENT_PROVIDED_METHOD = new MessageDescription("Provided method \"{0}\" must be implemented by the providing class \"{1}\".", null, 0);
  MessageDescription	CI_METHOD_FLAGS_CHANGED_IN_OVERRIDING = new MessageDescription("The method \"{0}\" cannot change the modifier when overriding a collaboration method.", null, 0);
  MessageDescription	NESTED_TYPE_NOT_PROVIDED = new MessageDescription("The nested type \"{0}\" from the collaboration interface \"{1}\" must be implemented.", null, 0);
  MessageDescription	NESTED_TYPE_NOT_BOUND = new MessageDescription("The nested type \"{0}\" from the collaboration interface \"{1}\" must be bound.", null, 0);
  MessageDescription	PROVIDING_DEFINES_OTHER_NESTED = new MessageDescription("The class \"{0}\" is not defined in the collaboration interface.", null, 0);
  MessageDescription	CLASS_IMPLEMENTS_N_CIS = new MessageDescription("The class \"{0}\" cannot implement more than one CI.", null, 0);
  MessageDescription	REFERENCE_IS_NOT_BINDING = new MessageDescription("\"{0}\" is not a binding class.", null, 0);
  MessageDescription	REFERENCE_IS_NOT_PROVIDING = new MessageDescription("\"{0}\" is not a providing class.", null, 0);
  MessageDescription	BINDING_OTHER_CI = new MessageDescription("\"{0}\" does not bind the collaboration interface \"{1}\".", null, 0);
  MessageDescription	PROVIDING_OTHER_CI = new MessageDescription("\"{0}\" does not provide the collaboration interface \"{1}\".", null, 0);
  MessageDescription	PROVIDING_DEFINES_CONSTRUCTOR = new MessageDescription("Providing class \"{0}\" cannot define constructors with parameters.", null, 0);
  MessageDescription	BINDING_PROVIDING_DIRECT_CREATION = new MessageDescription("Providing or binding class \"{0}\" cannot be directly created.", null, 0);
  MessageDescription	VIRTUAL_CALLING_PRIVATE_OUTER = new MessageDescription("Virtual or override class \"{0}\" cannot access private methods of the enclosing class.", null, 0);
  MessageDescription	VIRTUAL_ACCESSING_OUTER_FIELD = new MessageDescription("Virtual or override class \"{0}\" cannot access fields of the enclosing class.", null, 0);
  MessageDescription	VIRTUAL_CALLING_OUTER_OUTER = new MessageDescription("Virtual or override class \"{0}\" cannot call methods or access fields defined in the enclosing class of its outer class.", null, 0);
}
