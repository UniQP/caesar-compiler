/* The following code was generated by JFlex 1.3.2 on 8/14/03 2:33 AM */

/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: CaesarScanner.java,v 1.7 2003-08-14 00:35:50 werner Exp $
 */

package org.caesarj.compiler;

import org.caesarj.kjc.*;
import org.caesarj.compiler.CWarning;
import org.caesarj.compiler.Compiler;
import org.caesarj.compiler.CompilerMessages;
import org.caesarj.compiler.JavaStyleComment;
import org.caesarj.compiler.JavadocComment;
import org.caesarj.compiler.PositionedError;
import org.caesarj.compiler.tools.antlr.extra.CToken;
import org.caesarj.compiler.tools.antlr.extra.InputBuffer;
import org.caesarj.compiler.tools.antlr.extra.Scanner;
import org.caesarj.compiler.tools.antlr.runtime.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 8/14/03 2:33 AM from the specification file
 * <tt>file:/c:/java/kopi/src/caesar/Caesar.flex</tt>
 */
public class CaesarScanner extends org.caesarj.compiler.tools.antlr.extra.Scanner implements CaesarTokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int TYPEPATTERN = 1;
  final public static int STRINGLITERAL = 2;
  final public static int YYINITIAL = 0;
  final public static int TRADITIONALCOMMENT = 4;
  final public static int ENDOFLINECOMMENT = 5;
  final public static int CHARLITERAL = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\101\1\1\1\3\1\0\1\1\1\2\16\101\4\0\1\1\1\57"+
    "\1\72\1\0\1\100\1\61\1\44\1\73\1\60\1\65\1\67\1\10"+
    "\1\51\1\52\1\53\1\66\1\74\3\103\4\6\2\4\1\30\1\31"+
    "\1\56\1\43\1\47\1\62\1\70\3\5\1\77\1\7\1\77\5\100"+
    "\1\75\13\100\1\76\2\100\1\54\1\102\1\63\1\50\1\100\1\0"+
    "\1\11\1\24\1\22\1\26\1\13\1\25\1\36\1\34\1\20\1\100"+
    "\1\32\1\27\1\37\1\21\1\17\1\16\1\71\1\14\1\12\1\15"+
    "\1\23\1\40\1\41\1\35\1\33\1\42\1\55\1\46\1\64\1\45"+
    "\41\101\2\0\4\100\4\0\1\100\12\0\1\100\4\0\1\100\5\0"+
    "\27\100\1\0\37\100\1\0\u0128\100\2\0\22\100\34\0\136\100\2\0"+
    "\11\100\2\0\7\100\16\0\2\100\16\0\5\100\11\0\1\100\21\0"+
    "\117\101\21\0\3\101\27\0\1\100\13\0\1\100\1\0\3\100\1\0"+
    "\1\100\1\0\24\100\1\0\54\100\1\0\10\100\2\0\32\100\14\0"+
    "\202\100\1\0\4\101\5\0\71\100\2\0\2\100\2\0\2\100\3\0"+
    "\46\100\2\0\2\100\67\0\46\100\2\0\1\100\7\0\47\100\11\0"+
    "\21\101\1\0\27\101\1\0\3\101\1\0\1\101\1\0\2\101\1\0"+
    "\1\101\13\0\33\100\5\0\3\100\56\0\32\100\5\0\13\100\13\101"+
    "\12\0\12\101\6\0\1\101\143\100\1\0\1\100\7\101\2\0\6\101"+
    "\2\100\2\101\1\0\4\101\2\0\12\101\3\100\22\0\1\101\1\100"+
    "\1\101\33\100\3\0\33\101\65\0\46\100\13\101\u0150\0\3\101\1\0"+
    "\65\100\2\0\1\101\1\100\20\101\2\0\1\100\4\101\3\0\12\100"+
    "\2\101\2\0\12\101\21\0\3\101\1\0\10\100\2\0\2\100\2\0"+
    "\26\100\1\0\7\100\1\0\1\100\3\0\4\100\2\0\1\101\1\0"+
    "\7\101\2\0\2\101\2\0\3\101\11\0\1\101\4\0\2\100\1\0"+
    "\3\100\2\101\2\0\12\101\4\100\16\0\1\101\2\0\6\100\4\0"+
    "\2\100\2\0\26\100\1\0\7\100\1\0\2\100\1\0\2\100\1\0"+
    "\2\100\2\0\1\101\1\0\5\101\4\0\2\101\2\0\3\101\13\0"+
    "\4\100\1\0\1\100\7\0\14\101\3\100\14\0\3\101\1\0\7\100"+
    "\1\0\1\100\1\0\3\100\1\0\26\100\1\0\7\100\1\0\2\100"+
    "\1\0\5\100\2\0\1\101\1\100\10\101\1\0\3\101\1\0\3\101"+
    "\2\0\1\100\17\0\1\100\5\0\12\101\21\0\3\101\1\0\10\100"+
    "\2\0\2\100\2\0\26\100\1\0\7\100\1\0\2\100\2\0\4\100"+
    "\2\0\1\101\1\100\6\101\3\0\2\101\2\0\3\101\10\0\2\101"+
    "\4\0\2\100\1\0\3\100\4\0\12\101\22\0\2\101\1\0\6\100"+
    "\3\0\3\100\1\0\4\100\3\0\2\100\1\0\1\100\1\0\2\100"+
    "\3\0\2\100\3\0\3\100\3\0\10\100\1\0\3\100\4\0\5\101"+
    "\3\0\3\101\1\0\4\101\11\0\1\101\17\0\11\101\21\0\3\101"+
    "\1\0\10\100\1\0\3\100\1\0\27\100\1\0\12\100\1\0\5\100"+
    "\4\0\7\101\1\0\3\101\1\0\4\101\7\0\2\101\11\0\2\100"+
    "\4\0\12\101\22\0\2\101\1\0\10\100\1\0\3\100\1\0\27\100"+
    "\1\0\12\100\1\0\5\100\4\0\7\101\1\0\3\101\1\0\4\101"+
    "\7\0\2\101\7\0\1\100\1\0\2\100\4\0\12\101\22\0\2\101"+
    "\1\0\10\100\1\0\3\100\1\0\27\100\1\0\20\100\4\0\6\101"+
    "\2\0\3\101\1\0\4\101\11\0\1\101\10\0\2\100\4\0\12\101"+
    "\22\0\2\101\1\0\22\100\3\0\30\100\1\0\11\100\1\0\1\100"+
    "\2\0\7\100\3\0\1\101\4\0\6\101\1\0\1\101\1\0\10\101"+
    "\22\0\2\101\15\0\60\100\1\101\2\100\7\101\4\0\10\100\10\101"+
    "\1\0\12\101\47\0\2\100\1\0\1\100\2\0\2\100\1\0\1\100"+
    "\2\0\1\100\6\0\4\100\1\0\7\100\1\0\3\100\1\0\1\100"+
    "\1\0\1\100\2\0\2\100\1\0\4\100\1\101\2\100\6\101\1\0"+
    "\2\101\1\100\2\0\5\100\1\0\1\100\1\0\6\101\2\0\12\101"+
    "\2\0\2\100\42\0\1\100\27\0\2\101\6\0\12\101\13\0\1\101"+
    "\1\0\1\101\1\0\1\101\4\0\2\101\10\100\1\0\42\100\6\0"+
    "\24\101\1\0\2\101\4\100\4\0\10\101\1\0\44\101\11\0\1\101"+
    "\71\0\42\100\1\0\5\100\1\0\2\100\1\0\7\101\3\0\4\101"+
    "\6\0\12\101\6\0\6\100\4\101\106\0\46\100\12\0\47\100\11\0"+
    "\132\100\5\0\104\100\5\0\122\100\6\0\7\100\1\0\77\100\1\0"+
    "\1\100\1\0\4\100\2\0\7\100\1\0\1\100\1\0\4\100\2\0"+
    "\47\100\1\0\1\100\1\0\4\100\2\0\37\100\1\0\1\100\1\0"+
    "\4\100\2\0\7\100\1\0\1\100\1\0\4\100\2\0\7\100\1\0"+
    "\7\100\1\0\27\100\1\0\37\100\1\0\1\100\1\0\4\100\2\0"+
    "\7\100\1\0\47\100\1\0\23\100\16\0\11\101\56\0\125\100\14\0"+
    "\u026c\100\2\0\10\100\12\0\32\100\5\0\113\100\225\0\64\100\40\101"+
    "\7\0\1\100\4\0\12\101\41\0\4\101\1\0\12\101\6\0\130\100"+
    "\10\0\51\100\1\101\u0556\0\234\100\4\0\132\100\6\0\26\100\2\0"+
    "\6\100\2\0\46\100\2\0\6\100\2\0\10\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\37\100\2\0\65\100\1\0\7\100\1\0"+
    "\1\100\3\0\3\100\1\0\7\100\3\0\4\100\2\0\6\100\4\0"+
    "\15\100\5\0\3\100\1\0\7\100\17\0\4\101\32\0\5\101\20\0"+
    "\2\100\51\0\6\101\17\0\1\100\40\0\20\100\40\0\15\101\4\0"+
    "\1\101\40\0\1\100\4\0\1\100\2\0\12\100\1\0\1\100\3\0"+
    "\5\100\6\0\1\100\1\0\1\100\1\0\1\100\1\0\4\100\1\0"+
    "\3\100\1\0\7\100\46\0\44\100\u0e81\0\3\100\31\0\11\100\6\101"+
    "\1\0\5\100\2\0\3\100\6\0\124\100\4\0\2\101\2\0\2\100"+
    "\2\0\136\100\6\0\50\100\4\0\136\100\21\0\30\100\u0248\0\u19b6\100"+
    "\112\0\u51a6\100\132\0\u048d\100\u0773\0\u2ba4\100\u215c\0\u012e\100\322\0\7\100"+
    "\14\0\5\100\5\0\1\100\1\101\12\100\1\0\15\100\1\0\5\100"+
    "\1\0\1\100\1\0\2\100\1\0\2\100\1\0\154\100\41\0\u016b\100"+
    "\22\0\100\100\2\0\66\100\50\0\14\100\44\0\4\101\17\0\2\100"+
    "\30\0\3\100\31\0\1\100\6\0\3\100\1\0\1\100\1\0\207\100"+
    "\2\0\1\101\4\0\1\100\13\0\12\101\7\0\32\100\4\0\1\100"+
    "\1\0\32\100\12\0\132\100\3\0\6\100\2\0\6\100\2\0\6\100"+
    "\2\0\3\100\3\0\2\100\3\0\2\100\22\0\3\101\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    68,   136,   204,   272,   340,   408,   408,   476,   408, 
      544,   612,   680,   748,   816,   884,   952,  1020,  1088,  1156, 
     1224,  1292,  1360,  1428,  1496,  1564,  1632,   408,   408,  1700, 
     1768,  1836,  1904,  1972,   408,  2040,  2108,  2176,   408,  2244, 
     2312,   408,   408,  2380,  2448,   408,  2516,   408,   408,   408, 
      408,  2584,  2652,  2720,   408,   408,  2788,  2856,  2924,  2992, 
     3060,  3128,   408,   408,  3196,  3264,  3332,   408,  3400,  3468, 
     3536,   408,  3604,  3672,  3740,   408,  3808,   408,   408,  3876, 
      408,   408,  3944,  4012,  4080,  4148,  4216,  4284,  4352,  4420, 
     4488,  4556,  4624,  4692,  4760,  4828,  4896,  4964,  5032,  5100, 
     5168,  5236,   612,  5304,  5372,  5440,  5508,  5576,  5644,  5712, 
     5780,  5848,  5916,  5984,  6052,  6120,  6188,  6256,  6324,  6392, 
     6460,  6528,  6596,  6664,  6732,  6800,  6868,  6936,  7004,  7072, 
      408,   408,   408,   408,   408,  7140,   408,   408,   408,   408, 
     7208,   408,   408,   408,   408,   408,   408,  7276,  7344,  7412, 
     7480,  7548,   408,  7616,  7684,  7752,   408,   408,   408,   408, 
     7820,   408,   408,   408,   408,   408,   408,   408,  7888,   408, 
      408,  7956,  8024,  8092,  8160,  8228,  8296,  8364,  8432,  8500, 
     8568,   408,   408,  3604,  8636,  8704,  8772,  8840,  8908,  8976, 
     9044,  9112,  9180,  9248,  9316,  9384,  9452,  9520,  9588,  9656, 
     9724,  9792,   612,  9860,  9928,  9996, 10064, 10132, 10200, 10268, 
    10336, 10404, 10472, 10540, 10608, 10676,   612, 10744, 10812, 10880, 
    10948, 11016, 11084, 11152, 11220, 11288, 11356, 11424, 11492, 11560, 
    11628, 11696,   612, 11764, 11832, 11900, 11968, 12036, 12104, 12172, 
    12240, 12308, 12376, 12444, 12512, 12580,   408,   408, 12648,   408, 
    12716, 12784, 12852, 12920, 12988, 13056,   408, 13124,   408,   408, 
      408,   408,   408,   408,   408,   408,  7956,   408, 13192, 13260, 
    13328, 13396, 13464, 13532, 13600, 13668, 13736, 13804,   612, 13872, 
    13940, 14008, 14076,   612, 14144,   612, 14212, 14280, 14348, 14416, 
    14484, 14552, 14620, 14688, 14756, 14824, 14892, 14960, 15028,   612, 
      612, 15096, 15164, 15232, 15300, 15368, 15436, 15504,   612, 15572, 
    15640, 15708, 15776,   612, 15844, 15912, 15980, 16048, 16116, 16184, 
    16252,   612,   612,   612, 16320, 16388, 16456, 16524,   408, 16592, 
    16660, 16728, 16796, 16864, 16932, 17000, 17068,   612, 17136, 17204, 
      612, 17272,   612, 17340, 17408, 17476, 17544, 17612, 17680, 17748, 
    17816, 17884, 17952, 18020, 18088, 18156, 18224, 18292, 18360, 18428, 
    18496, 18564, 18632,   612, 18700,   612, 18768, 18836,   612,   612, 
    18904,   612, 18972,   612,   612, 19040,   612, 19108, 19176, 19244, 
    19312, 19380, 19448,   612, 19516,   612, 19584, 19652, 19720, 19788, 
      408,   612,   612, 19856,   612, 19924, 19992,   612, 20060, 20128, 
    20196, 20264,   612, 20332, 20400, 20468, 20536, 20604, 20672, 20740, 
    20808,   612, 20876, 20944, 21012,   612, 21080,   612, 21148, 21216, 
    21284,   612, 21352, 21420, 21488, 21556, 21624,   612, 21692, 21760, 
    21828, 21896, 21964, 22032, 22100, 22168, 22236, 22304,   612, 22372, 
    22440, 22508, 22576,   612, 22644, 22712, 22780,   612, 22848, 22916, 
    22984, 23052, 23120, 23188, 23256, 23324, 23392,   612,   612, 23460, 
      612,   612, 23528,   612,   612,   408,   408, 23596, 23664,   612, 
      612, 23732,   612, 23800, 23868,   612, 23936, 24004,   612,   612, 
    24072,   612,   612, 24140, 24208, 24276, 24344,   612, 24412,   612, 
      612,   408, 24480, 24548,   612,   612, 24616,   612, 24684, 24752, 
      612, 24820, 24888, 24956, 25024, 25092,   612,   612,   612,   612, 
    25160, 25228,   408, 25296, 25364, 25432,   612,   612, 25500,   612
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\14\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\4\14\1\36\1\14\1\37\1\40\1\14"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\14\1\67"+
    "\1\70\1\71\4\14\2\7\1\13\2\72\1\73\26\72"+
    "\1\7\23\72\1\7\10\72\1\74\15\72\2\75\1\76"+
    "\1\77\66\75\1\100\7\75\1\101\1\75\2\102\1\103"+
    "\1\104\67\102\1\7\6\102\1\105\1\102\2\106\1\107"+
    "\1\110\63\106\1\111\14\106\2\112\1\113\1\114\100\112"+
    "\107\0\1\12\104\0\1\13\1\0\1\13\1\115\3\0"+
    "\1\115\11\0\2\116\1\117\23\0\1\120\20\0\1\13"+
    "\1\117\1\0\1\116\3\0\1\13\4\0\4\14\1\0"+
    "\17\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\10\0\1\121\32\0\1\122\44\0\4\14\1\0"+
    "\1\14\1\123\1\14\1\124\7\14\1\125\1\126\2\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\127\5\14\1\130\4\14"+
    "\2\0\1\14\1\131\1\132\4\14\1\133\1\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\1\134\2\0\3\14\1\135\5\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\136\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\3\14\1\137\13\14"+
    "\2\0\2\14\1\140\6\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\141\2\14\1\142"+
    "\2\14\1\143\3\14\1\144\4\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\17\14\2\0\6\14\1\145\2\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\146"+
    "\3\14\1\147\2\14\2\0\5\14\1\150\3\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\151\1\14\1\152\7\14\1\153\4\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\154\2\14\1\155\2\14\1\156\7\14\1\157"+
    "\2\0\2\14\1\160\6\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\2\14\1\161\1\162"+
    "\2\14\1\163\1\164\7\14\2\0\1\14\1\165\7\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\166\5\14\1\167\1\170\6\14\1\171\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\172\3\14\1\173\10\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\6\14\1\174\10\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\6\14\1\175\10\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\6\14\1\176"+
    "\1\177\7\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\3\14\1\200\13\14"+
    "\2\0\2\14\1\201\6\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\43\0\1\202\103\0\1\203\1\204\102\0"+
    "\1\205\2\0\1\206\100\0\1\207\3\0\1\210\77\0"+
    "\1\211\103\0\1\212\6\0\1\213\35\0\1\120\1\0"+
    "\1\120\65\0\1\120\6\0\1\120\43\0\1\214\12\0"+
    "\1\215\70\0\1\216\103\0\1\217\103\0\1\220\22\0"+
    "\1\221\1\222\57\0\1\223\51\0\1\224\1\0\1\225"+
    "\1\226\3\0\1\227\4\0\1\230\42\0\1\231\17\0"+
    "\1\232\1\0\1\233\1\115\3\0\1\115\11\0\2\116"+
    "\1\117\5\0\1\234\15\0\1\120\20\0\1\233\1\117"+
    "\1\234\1\116\3\0\1\233\31\0\1\235\23\0\1\235"+
    "\31\0\1\12\25\0\1\235\23\0\1\235\114\0\1\236"+
    "\1\237\14\0\2\75\2\0\66\75\1\0\7\75\1\0"+
    "\1\75\3\0\1\77\100\0\3\240\1\0\2\240\1\241"+
    "\5\240\1\242\1\243\3\240\1\244\2\240\1\245\1\246"+
    "\44\240\1\247\1\250\1\251\5\240\1\252\1\251\73\0"+
    "\1\253\13\0\1\104\100\0\3\240\1\0\2\240\1\254"+
    "\5\240\1\255\1\256\3\240\1\257\2\240\1\260\1\261"+
    "\44\240\1\262\1\263\1\264\5\240\1\265\1\264\2\106"+
    "\2\0\63\106\1\0\14\106\3\0\1\110\100\0\2\266"+
    "\1\107\1\110\62\266\1\267\1\270\14\266\2\112\2\0"+
    "\100\112\3\0\1\114\104\0\1\271\1\0\1\271\1\0"+
    "\1\272\41\0\1\272\21\0\1\271\6\0\1\271\4\0"+
    "\1\120\1\0\1\120\1\115\3\0\1\115\11\0\2\116"+
    "\45\0\1\120\2\0\1\116\3\0\1\120\4\0\4\14"+
    "\1\0\1\14\1\273\15\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\6\14"+
    "\1\274\10\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\14\1\275\15\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\276\12\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\277\2\14\1\300\13\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\5\14\1\301\11\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\302"+
    "\6\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\303\10\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\7\14\1\304\7\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\305\15\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\306"+
    "\1\307\11\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\4\14\1\310\12\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\311\11\14\1\312\4\14\2\0"+
    "\1\14\1\313\7\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\3\14\1\314\3\14\1\315"+
    "\7\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\11\14\1\316\5\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\317\3\14\1\320\1\321\7\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\7\14\1\322\7\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\13\14\1\323\3\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\324\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\14\1\325\2\14"+
    "\1\326\12\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\5\14\1\327\11\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\330\12\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\17\14\2\0\7\14\1\331\1\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\1\332\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\1\14\1\333\2\14\1\334"+
    "\12\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\335\10\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\336\5\14\1\337\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\340\1\14\1\341\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\342\16\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\14\14\1\343\2\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\344\14\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\6\14\1\345\10\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\346\6\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\4\14\1\347\12\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\16\14\1\350\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\3\14\1\351\13\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\352"+
    "\6\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\353\10\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\5\14\1\354\3\14\1\355\2\14\1\356"+
    "\2\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\12\14\1\357\4\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\360\6\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\361\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\7\14\1\362"+
    "\6\14\1\363\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\3\14\1\364\13\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\365\16\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\7\14\1\366\7\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\43\0\1\367\103\0\1\370\3\0"+
    "\1\371\77\0\1\372\52\0\1\373\112\0\1\374\75\0"+
    "\1\375\111\0\1\376\73\0\1\377\76\0\1\232\1\0"+
    "\1\232\1\115\3\0\1\115\11\0\2\116\24\0\1\120"+
    "\20\0\1\232\2\0\1\116\3\0\1\232\4\0\1\232"+
    "\1\0\1\233\1\115\3\0\1\115\11\0\2\116\1\117"+
    "\23\0\1\120\20\0\1\233\1\117\1\0\1\116\3\0"+
    "\1\233\4\0\4\u0100\1\0\1\u0100\1\0\1\u0100\6\0"+
    "\1\u0100\1\0\3\u0100\45\0\1\u0100\2\0\1\u0100\3\0"+
    "\1\u0100\6\0\1\u0101\65\0\1\u0101\6\0\1\u0101\6\0"+
    "\1\241\65\0\1\241\6\0\1\241\6\0\1\u0102\64\0"+
    "\1\u0103\1\u0102\6\0\1\u0102\73\0\1\u0104\103\0\1\u0105"+
    "\103\0\1\u0106\103\0\1\u0107\103\0\1\u0108\103\0\1\u0109"+
    "\103\0\1\u010a\16\0\1\u010b\64\0\1\u0103\1\u010b\6\0"+
    "\1\u010b\73\0\1\u010c\14\0\1\271\1\0\1\271\16\0"+
    "\2\116\45\0\1\271\2\0\1\116\3\0\1\271\4\0"+
    "\1\271\1\0\1\271\65\0\1\271\6\0\1\271\4\0"+
    "\4\14\1\0\2\14\1\u010d\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\12\14\1\u010e\4\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u010f"+
    "\12\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u0110\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u0111\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\7\14\1\u0112\7\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u0113"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\11\14\1\u0114\5\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\3\14\1\u0115\13\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u0116\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u0117"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u0118\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u0119\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\12\14\1\u011a\4\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u011b"+
    "\6\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u011c\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\6\14\1\u011d\10\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\u011e\15\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\17\14\2\0"+
    "\1\u011f\10\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\11\14\1\u0120\5\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\4\14\1\u0121\12\14\2\0\6\14\1\u0122\2\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\17\14\2\0\6\14\1\u0123\2\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\u0124\6\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\16\14\1\u0125\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\3\14\1\u0126\13\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u0127\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u0128"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\u0129\7\14\1\u012a"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\7\14\1\u012b\7\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\16\14\1\u012c\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u012d"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\11\14\1\u012e\5\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\1\14\1\u012f\15\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\u0130\2\14\1\u0131\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\1\u0132\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\14\1\u0133\15\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\u0134\16\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\3\14\1\u0135\13\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\6\14\1\u0136"+
    "\10\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\1\u0137\16\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\16\14\1\u0138\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\15\14\1\u0139"+
    "\1\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u013a\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\1\14\1\u013b\15\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\u013c\16\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\u013d\16\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\1\u013e\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\1\u013f\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\1\u0140\16\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\13\14\1\u0141\3\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\17\14"+
    "\2\0\4\14\1\u0142\4\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\6\14\1\u0143\10\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\15\14\1\u0144\1\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\u0145\16\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u0146"+
    "\12\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\5\14\1\u0147\11\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\1\u0148\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\43\0\1\u0149\52\0\1\u014a"+
    "\103\0\1\u014b\162\0\1\u014c\52\0\1\u014d\63\0\1\u014e"+
    "\67\0\4\u0100\1\0\1\u0100\1\0\1\u0100\6\0\1\u0100"+
    "\1\0\3\u0100\1\117\44\0\1\u0100\1\117\1\0\1\u0100"+
    "\3\0\1\u0100\73\0\1\u0103\14\0\4\14\1\0\3\14"+
    "\1\u014f\13\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\10\14\1\u0150\6\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u0151\13\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\3\14\1\u0152\13\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\7\14"+
    "\1\u0153\7\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\11\14\1\u0154\5\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u0155\13\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\17\14\2\0\2\14\1\u0156\6\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\4\14"+
    "\1\u0157\12\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\11\14\1\u0158\5\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u0159\6\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\11\14\1\u015a\5\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\3\14"+
    "\1\u015b\13\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\14\1\u015c\15\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\17\14\2\0\7\14\1\u015d\1\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\u015e\16\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u015f"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u0160\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\7\14\1\u0161\7\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\u0162\6\14\1\u0163\7\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\4\14"+
    "\1\u0164\12\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\7\14\1\u0165\7\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u0166\13\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\u0167\16\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\3\14\1\u0168"+
    "\13\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\3\14\1\u0169\13\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u016a\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\17\14\2\0\6\14\1\u016b\2\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\17\14\2\0"+
    "\2\14\1\u016c\6\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\1\14\1\u016d\15\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u016e\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\7\14\1\u016f\7\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\1\u0170\16\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\14\1\u0171\15\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\10\14\1\u0172\6\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\3\14"+
    "\1\u0173\13\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\17\14\2\0\1\u0174"+
    "\10\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u0175\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\u0176\15\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u0177"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\16\14\1\u0178\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\4\14\1\u0179\12\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\6\14"+
    "\1\u017a\10\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\u017b\16\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\12\14\1\u017c\4\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\1\u017d\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\4\14\1\u017e\12\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\12\14\1\u017f\4\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\14\1\u0180\3\14\1\u0181\11\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\2\14\1\u0182\14\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\13\0\1\u0183\113\0\1\u0184"+
    "\103\0\1\u0185\71\0\1\u0186\121\0\1\u0187\60\0\4\14"+
    "\1\0\4\14\1\u0188\12\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\15\14"+
    "\1\u0189\1\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\u018a\16\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\11\14\1\u018b\5\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u018c\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\3\14\1\u018d"+
    "\13\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\17\14\2\0\2\14\1\u018e"+
    "\6\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\15\14\1\u018f\1\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u0190\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u0191"+
    "\6\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\7\14\1\u0192\7\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\1\14\1\u0193\5\14\1\u0194\7\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\17\14\2\0\4\14\1\u0195\4\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\15\14\1\u0196\1\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\11\14\1\u0197"+
    "\5\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\u0198\1\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u0199\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\1\u019a\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\11\14\1\u019b\5\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\11\14\1\u019c\5\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\7\14\1\u019d\7\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\u019e\6\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\14\14\1\u019f\2\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\u01a0\12\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\17\14\2\0\5\14\1\u01a1\3\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u01a2\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\11\14\1\u01a3\5\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u01a4\6\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\13\14\1\u01a5\3\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u01a6\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\u01a7\16\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\1\u01a8\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\17\14"+
    "\2\0\1\14\1\u01a9\7\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\3\14\1\u01aa\13\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\16\14\1\u01ab\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\2\14\1\u01ac\14\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\7\14\1\u01ad"+
    "\7\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\1\u01ae\16\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\2\14\1\u01af\14\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\14\0\1\u01b0\103\0\1\u01b1"+
    "\107\0\1\u01b2\77\0\1\u01b3\73\0\4\14\1\0\11\14"+
    "\1\u01b4\5\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\14\14\1\u01b5\2\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\6\14\1\u01b6\10\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\14\1\u01b7\15\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u01b8\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\7\14\1\u01b9\7\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\u01ba\14\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\10\14\1\u01bb\6\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u01bc\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\2\14\1\u01bd\14\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\u01be\12\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\2\14\1\u01bf\14\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u01c0\14\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\2\14\1\u01c1\14\14"+
    "\2\0\11\14\26\0\1\14\2\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\12\14\1\u01c2\4\14\2\0\11\14"+
    "\26\0\1\14\2\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\15\14\1\u01c3\1\14\2\0\11\14\26\0\1\14"+
    "\2\0\6\14\1\0\1\14\4\0\4\14\1\0\11\14"+
    "\1\u01c4\5\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\u01c5\16\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u01c6\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\12\14\1\u01c7\4\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\12\14\1\u01c8"+
    "\4\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\u01c9\10\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\u01ca\6\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\17\14\2\0\1\14\1\u01cb\7\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u01cc"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u01cd\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u01ce\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\1\u01cf\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\16\14\1\u01d0\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u01d1\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\15\0\1\u01d2\101\0"+
    "\1\u01d3\104\0\1\u01d4\107\0\1\u01d5\67\0\4\14\1\0"+
    "\4\14\1\u01d6\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\5\14\1\u01d7"+
    "\11\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u01d8\6\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\15\14\1\u01d9\1\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u01da\6\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u01db"+
    "\6\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\17\14\2\0\4\14\1\u01dc"+
    "\4\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\u01dd\6\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\2\14\1\u01de\14\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\1\14\1\u01df"+
    "\13\14\1\u01e0\1\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\17\14\2\0"+
    "\4\14\1\u01e1\4\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\4\14\1\u01e2\12\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u01e3\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\2\14\1\u01e4\14\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\11\14\1\u01e5"+
    "\5\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u01e6\6\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u01e7\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\2\14\1\u01e8\14\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\3\14\1\u01e9"+
    "\13\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\u01ea\1\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u01eb\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\13\0\1\u01ec\101\0"+
    "\1\u01ed\76\0\4\14\1\0\7\14\1\u01ee\7\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\17\14\2\0\4\14\1\u01ef\4\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u01f0\12\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\11\14\1\u01f1"+
    "\5\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\u01f2\1\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u01f3\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\6\14\1\u01f4\10\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u01f5"+
    "\14\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\4\14\1\u01f6\12\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u01f7\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\u01f8\16\14\2\0\11\14\26\0\1\14\2\0\6\14"+
    "\1\0\1\14\21\0\1\u01f9\66\0\4\14\1\0\17\14"+
    "\2\0\10\14\1\u01fa\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u01fb\14\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\15\14\1\u01fc\1\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\14\14\1\u01fd\2\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\1\14\1\u01fe"+
    "\15\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\7\14\1\u01ff\7\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u0200\12\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\15\0\1\u0201\72\0"+
    "\4\14\1\0\2\14\1\u0202\14\14\2\0\11\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u0203\6\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\7\14\1\u0204"+
    "\7\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\u0205\1\14\2\0"+
    "\11\14\26\0\1\14\2\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\17\14\2\0\4\14\1\u0206\4\14\26\0"+
    "\1\14\2\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\6\14\1\u0207\10\14\2\0\11\14\26\0\1\14\2\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u0208"+
    "\6\14\2\0\11\14\26\0\1\14\2\0\6\14\1\0"+
    "\1\14";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String[] YY_ERROR_MSG = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  9,  1,  1,  9,  9,  1,  1,  9,  1,  9, 
     9,  9,  9,  1,  1,  1,  9,  9,  1,  3,  3,  1,  1,  1,  9,  9, 
     1,  1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  9,  0,  9,  9,  1, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  9,  9,  1,  9,  9,  9,  9,  1,  9,  9,  9, 
     9,  9,  9,  0,  0,  0,  0,  0,  9,  0,  1,  0, 13,  9,  9,  9, 
     1,  9,  9,  9,  9,  9,  9,  9,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  9,  0,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  0,  0,  0,  0,  0,  1, 
     9,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input buffer */
  private org.caesarj.compiler.tools.antlr.extra.InputBuffer buffer;

  /** the input device : unused but referenced by generated constructors */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] yy_buffer = null;

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  public CaesarScanner(Compiler compiler, InputBuffer buffer) {
    super(compiler, buffer);
    this.buffer = buffer;
  }

  /**
   * Creates a character literal token.
   */
  private CToken buildCharacterLiteral(char image) {
    return new CToken(CHARACTER_LITERAL, String.valueOf(image));
  }


  private final StringBuffer	string = new StringBuffer();
  
  private final StringBuffer	pattern = new StringBuffer();
  
  private boolean typePatternExpected;
  
  private int oldState;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaesarScanner(java.io.Reader in) {
    // dummy: we provide our own constructor
  super(null, null);
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CaesarScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[25568];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1658) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) { return yy_buffer[yy_currentPos++]; }

    /* if the eof is reached, we don't need to work hard */
    if (yy_atEOF) { return YYEOF; }

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char[]  newBuffer = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = buffer.read(yy_buffer, yy_endRead, yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) { return YYEOF; }

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

  /**
   * Exports the buffer state.
   */
  public org.caesarj.compiler.tools.antlr.extra.InputBufferState getBufferState() {
    org.caesarj.compiler.tools.antlr.extra.InputBufferState	state;

    state = new org.caesarj.compiler.tools.antlr.extra.InputBufferState(yy_buffer,
								   yy_startRead,
								   yy_endRead,
								   yy_currentPos,
								   yy_markedPos,
								   yy_pushbackPos,
								   yy_atEOF);
    // invalidate buffer
    yy_buffer = null;
    return state;
  }

  /**
   * Imports the buffer state, if exists, otherwise initialise buffer.
   */
  private void initBufferState() {
    org.caesarj.compiler.tools.antlr.extra.InputBufferState	state;

    state = buffer.getBufferState(this);
    if (state == null) {
      yy_buffer = new char[YY_BUFFERSIZE];
      // other variables initialised to their default values
    } else {
      yy_buffer = state.buffer;
      yy_startRead = state.startRead;
      yy_endRead = state.endRead;
      yy_currentPos = state.currentPos;
      yy_markedPos = state.markedPos;
      yy_pushbackPos = state.pushbackPos;
      yy_atEOF = state.atEOF;
    }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null) {
      yy_reader.close();
    }
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() ) {
      yy_ScanError(YY_PUSHBACK_2BIG);
    }

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.caesarj.compiler.tools.antlr.runtime.Token nextTokenImpl() throws java.io.IOException {
    int yy_input;
    int yy_action;

    yy_pushbackPos = -1;
    boolean yy_was_pushback;

    if (yy_buffer == null) {
      initBufferState();
    }

    while (true) {

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) { break yy_forAction; }

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 2) > 0 )
            yy_pushbackPos = yy_currentPos;

          if ( (yy_attributes & 1) > 0 ) {
            yy_was_pushback = (yy_attributes & 4) > 0;
            yy_action = yy_state;
            yy_markedPos = yy_currentPos;
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }

      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos;

      switch (yy_action) {

        case 460: 
          { yybegin(TYPEPATTERN); pattern.setLength(0); return TOKEN_LITERAL_declare; }
        case 521: break;
        case 481: 
          { typePatternExpected = true; return TOKEN_LITERAL_pointcut; }
        case 522: break;
        case 28: 
          { typePatternExpected = false; return TOKEN_SEMI; }
        case 523: break;
        case 337: 
          { typePatternExpected = true; return TOKEN_LITERAL_after; }
        case 524: break;
        case 392: 
          { typePatternExpected = true; return TOKEN_LITERAL_around; }
        case 525: break;
        case 421: 
          { typePatternExpected = true; return TOKEN_LITERAL_before; }
        case 526: break;
        case 519: 
          {  return TOKEN_LITERAL_collaboration;  }
        case 527: break;
        case 517: 
          {  return TOKEN_LITERAL_crosscutting;  }
        case 528: break;
        case 516: 
          {  return TOKEN_LITERAL_synchronized;  }
        case 529: break;
        case 512: 
          {  return TOKEN_INVARIANT;  }
        case 530: break;
        case 509: 
          {  return TOKEN_LITERAL_implements;  }
        case 531: break;
        case 508: 
          {  return TOKEN_LITERAL_instanceof;  }
        case 532: break;
        case 507: 
          {  return TOKEN_LITERAL_privileged;  }
        case 533: break;
        case 506: 
          {  return TOKEN_LITERAL_precedence;  }
        case 534: break;
        case 500: 
          {  return TOKEN_LITERAL_interface;  }
        case 535: break;
        case 497: 
          {  return TOKEN_LITERAL_protected;  }
        case 536: break;
        case 495: 
          {  return TOKEN_LITERAL_transient;  }
        case 537: break;
        case 494: 
          {  return TOKEN_LITERAL_returning;  }
        case 538: break;
        case 491: 
          {  return TOKEN_REQUIRE;  }
        case 539: break;
        case 490: 
          {  return TOKEN_LITERAL_volatile;  }
        case 540: break;
        case 489: 
          {  return TOKEN_LITERAL_deployed;  }
        case 541: break;
        case 487: 
          {  return TOKEN_LITERAL_continue;  }
        case 542: break;
        case 482: 
          {  return TOKEN_LITERAL_override;  }
        case 543: break;
        case 479: 
          {  return TOKEN_LITERAL_provided;  }
        case 544: break;
        case 478: 
          {  return TOKEN_LITERAL_provides;  }
        case 545: break;
        case 475: 
          {  return TOKEN_LITERAL_throwing;  }
        case 546: break;
        case 472: 
          {  return TOKEN_LITERAL_expected;  }
        case 547: break;
        case 470: 
          {  return TOKEN_LITERAL_strictfp;  }
        case 548: break;
        case 469: 
          {  return TOKEN_LITERAL_abstract;  }
        case 549: break;
        case 466: 
          {  return TOKEN_ENSURE;  }
        case 550: break;
        case 164: 
          {  string.append('\b');  }
        case 551: break;
        case 163: 
          {  string.append('\n');  }
        case 552: break;
        case 162: 
          {  string.append('\t');  }
        case 553: break;
        case 161: 
          {  string.append('\r');  }
        case 554: break;
        case 159: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
          {  reportTrouble(CompilerMessages.BAD_ESCAPE_SEQUENCE, new Object[]{ yytext() });  }
        case 555: break;
        case 158: 
          {  oldState = yystate(); yybegin(TRADITIONALCOMMENT); string.setLength(0);  }
        case 556: break;
        case 157: 
          {  oldState = yystate(); yybegin(ENDOFLINECOMMENT); string.setLength(0);  }
        case 557: break;
        case 156: 
          {  typePatternExpected = false;
  					  oldState= YYINITIAL; 
  					  yybegin(YYINITIAL);
  					  pattern.append(yytext()); 
  					  return new CToken(TYPE_PATTERN, pattern.toString());  }
        case 558: break;
        case 152: 
          {  return TOKEN_ATAT;  }
        case 559: break;
        case 146: 
          {  return TOKEN_STAR_ASSIGN;  }
        case 560: break;
        case 145: 
          {  yybegin(TRADITIONALCOMMENT); string.setLength(0);  }
        case 561: break;
        case 144: 
          {  yybegin(ENDOFLINECOMMENT); string.setLength(0);  }
        case 562: break;
        case 143: 
          {  return TOKEN_SLASH_ASSIGN;  }
        case 563: break;
        case 142: 
          {  return TOKEN_PERCENT_ASSIGN;  }
        case 564: break;
        case 141: 
          {  return TOKEN_NOT_EQUAL;  }
        case 565: break;
        case 140: 
          {  return TOKEN_SL;  }
        case 566: break;
        case 139: 
          {  return TOKEN_LE;  }
        case 567: break;
        case 138: 
          {  return TOKEN_DEC;  }
        case 568: break;
        case 137: 
          {  return TOKEN_MINUS_ASSIGN;  }
        case 569: break;
        case 136: 
          {  return TOKEN_BXOR_ASSIGN;  }
        case 570: break;
        case 135: 
          {  return TOKEN_SR;  }
        case 571: break;
        case 134: 
          {  return TOKEN_GE;  }
        case 572: break;
        case 133: 
          {  return TOKEN_LOR;  }
        case 573: break;
        case 132: 
          {  return TOKEN_BOR_ASSIGN;  }
        case 574: break;
        case 131: 
          {  return TOKEN_LAND;  }
        case 575: break;
        case 130: 
          {  return TOKEN_BAND_ASSIGN;  }
        case 576: break;
        case 129: 
          {  return TOKEN_EQUAL;  }
        case 577: break;
        case 122: 
          {  return TOKEN_LITERAL_do;  }
        case 578: break;
        case 102: 
          {  return TOKEN_LITERAL_if;  }
        case 579: break;
        case 81: 
          {  return TOKEN_PLUS_ASSIGN;  }
        case 580: break;
        case 80: 
          {  return TOKEN_INC;  }
        case 581: break;
        case 77: 
        case 79: 
        case 184: 
          {  return new CToken(REAL_LITERAL, yytext());  }
        case 582: break;
        case 66: 
        case 67: 
          {  reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "character literal" });  }
        case 583: break;
        case 40: 
          {  return TOKEN_DOT;  }
        case 584: break;
        case 39: 
          {  return TOKEN_MINUS;  }
        case 585: break;
        case 38: 
          {  return TOKEN_COMMA;  }
        case 586: break;
        case 37: 
          {  return TOKEN_BXOR;  }
        case 587: break;
        case 36: 
          {  return TOKEN_GT;  }
        case 588: break;
        case 35: 
          {  return TOKEN_BOR;  }
        case 589: break;
        case 34: 
          {  return TOKEN_BNOT;  }
        case 590: break;
        case 33: 
          {  return TOKEN_BAND;  }
        case 591: break;
        case 32: 
          {  return TOKEN_ASSIGN;  }
        case 592: break;
        case 6: 
        case 53: 
        case 59: 
        case 64: 
        case 65: 
        case 68: 
        case 72: 
          {  reportTrouble(CompilerMessages.ILLEGAL_CHAR, new Object[]{ yytext() });  }
        case 593: break;
        case 7: 
          {  /* ignore */  }
        case 594: break;
        case 8: 
        case 9: 
          {  incrementLine();  }
        case 595: break;
        case 10: 
        case 56: 
        case 78: 
        case 154: 
        case 255: 
          {  return new CToken(INTEGER_LITERAL, yytext());  }
        case 596: break;
        case 11: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 29: 
        case 30: 
        case 31: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 214: 
        case 215: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 284: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 334: 
        case 335: 
        case 336: 
        case 338: 
        case 339: 
        case 341: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 347: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 364: 
        case 366: 
        case 367: 
        case 370: 
        case 372: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
        case 384: 
        case 393: 
        case 395: 
        case 396: 
        case 398: 
        case 399: 
        case 401: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 412: 
        case 413: 
        case 414: 
        case 416: 
        case 418: 
        case 419: 
        case 420: 
        case 422: 
        case 423: 
        case 425: 
        case 426: 
        case 428: 
        case 429: 
        case 430: 
        case 435: 
        case 436: 
        case 437: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 444: 
        case 445: 
        case 446: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 459: 
        case 462: 
        case 471: 
        case 473: 
        case 474: 
        case 476: 
        case 477: 
        case 480: 
        case 483: 
        case 484: 
        case 485: 
        case 486: 
        case 488: 
        case 493: 
        case 496: 
        case 498: 
        case 499: 
        case 501: 
        case 502: 
        case 503: 
        case 505: 
        case 510: 
        case 511: 
        case 513: 
        case 514: 
        case 515: 
        case 518: 
          {  return new CToken(IDENT, yytext().intern());  }
        case 597: break;
        case 12: 
          {  return TOKEN_PLUS;  }
        case 598: break;
        case 41: 
          {  return TOKEN_LBRACK;  }
        case 599: break;
        case 42: 
          {  return TOKEN_LCURLY;  }
        case 600: break;
        case 43: 
          {  return TOKEN_LT;  }
        case 601: break;
        case 44: 
          {  return TOKEN_LNOT;  }
        case 602: break;
        case 45: 
          {  return TOKEN_LPAREN;  }
        case 603: break;
        case 46: 
          {  return TOKEN_PERCENT;  }
        case 604: break;
        case 47: 
          {  return TOKEN_QUESTION;  }
        case 605: break;
        case 48: 
          {  return TOKEN_RBRACK;  }
        case 606: break;
        case 49: 
          {  return TOKEN_RCURLY;  }
        case 607: break;
        case 50: 
          {  return TOKEN_RPAREN;  }
        case 608: break;
        case 51: 
          {  return TOKEN_SLASH;  }
        case 609: break;
        case 52: 
          {  return TOKEN_STAR;  }
        case 610: break;
        case 54: 
          {  yybegin(STRINGLITERAL); string.setLength(0);  }
        case 611: break;
        case 55: 
          {  yybegin(CHARLITERAL);  }
        case 612: break;
        case 57: 
        case 58: 
          {  pattern.append(yytext());  }
        case 613: break;
        case 60: 
        case 69: 
        case 73: 
        case 181: 
          {  string.append(yytext());  }
        case 614: break;
        case 61: 
        case 62: 
          {  reportTrouble(CompilerMessages.BAD_END_OF_LINE, new Object[]{ "string literal" });  }
        case 615: break;
        case 63: 
          {  yybegin(YYINITIAL); return new CToken(STRING_LITERAL, string.toString());  }
        case 616: break;
        case 165: 
          {  string.append('\f');  }
        case 617: break;
        case 166: 
          {  string.append('\"');  }
        case 618: break;
        case 167: 
          {  string.append('\'');  }
        case 619: break;
        case 169: 
          {  string.append('\\');  }
        case 620: break;
        case 170: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral(yytext().charAt(0));  }
        case 621: break;
        case 202: 
          {  return TOKEN_LITERAL_try;  }
        case 622: break;
        case 213: 
          {  return TOKEN_LITERAL_int;  }
        case 623: break;
        case 216: 
          {  return TOKEN_LITERAL_new;  }
        case 624: break;
        case 232: 
          {  return TOKEN_LITERAL_for;  }
        case 625: break;
        case 246: 
          {  return TOKEN_FJEQUAL;  }
        case 626: break;
        case 247: 
          {  return TOKEN_SR_ASSIGN;  }
        case 627: break;
        case 248: 
          {  return TOKEN_BSR;  }
        case 628: break;
        case 249: 
          {  return TOKEN_SL_ASSIGN;  }
        case 629: break;
        case 259: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\r');  }
        case 630: break;
        case 260: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\t');  }
        case 631: break;
        case 261: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\n');  }
        case 632: break;
        case 262: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\b');  }
        case 633: break;
        case 263: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\f');  }
        case 634: break;
        case 264: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\"');  }
        case 635: break;
        case 265: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\'');  }
        case 636: break;
        case 267: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\\');  }
        case 637: break;
        case 278: 
          {  return TOKEN_LITERAL_else;  }
        case 638: break;
        case 283: 
          {  return TOKEN_LITERAL_true;  }
        case 639: break;
        case 285: 
          {  return TOKEN_LITERAL_this;  }
        case 640: break;
        case 299: 
          {  return TOKEN_LITERAL_null;  }
        case 641: break;
        case 300: 
          {  return TOKEN_LITERAL_case;  }
        case 642: break;
        case 308: 
          {  return TOKEN_LITERAL_char;  }
        case 643: break;
        case 313: 
          {  return TOKEN_LITERAL_byte;  }
        case 644: break;
        case 321: 
          {  return TOKEN_LITERAL_long;  }
        case 645: break;
        case 322: 
          {  return TOKEN_LITERAL_goto;  }
        case 646: break;
        case 323: 
          {  return TOKEN_LITERAL_void;  }
        case 647: break;
        case 328: 
          {  return TOKEN_BSR_ASSIGN;  }
        case 648: break;
        case 340: 
          {  return TOKEN_LITERAL_super;  }
        case 649: break;
        case 342: 
          {  return TOKEN_LITERAL_short;  }
        case 650: break;
        case 348: 
          {  return TOKEN_LITERAL_throw;  }
        case 651: break;
        case 363: 
          {  return TOKEN_LITERAL_catch;  }
        case 652: break;
        case 365: 
          {  return TOKEN_LITERAL_const;  }
        case 653: break;
        case 368: 
          {  return TOKEN_LITERAL_class;  }
        case 654: break;
        case 369: 
          {  return TOKEN_LITERAL_clean;  }
        case 655: break;
        case 371: 
          {  return TOKEN_LITERAL_break;  }
        case 656: break;
        case 373: 
          {  return TOKEN_LITERAL_binds;  }
        case 657: break;
        case 374: 
          {  return TOKEN_LITERAL_false;  }
        case 658: break;
        case 375: 
          {  return TOKEN_LITERAL_final;  }
        case 659: break;
        case 376: 
          {  return TOKEN_LITERAL_float;  }
        case 660: break;
        case 383: 
          {  return TOKEN_LITERAL_wraps;  }
        case 661: break;
        case 385: 
          {  return TOKEN_LITERAL_while;  }
        case 662: break;
        case 390: 
          {  return TOKEN_ATFAIL;  }
        case 663: break;
        case 394: 
          {  return TOKEN_LITERAL_static;  }
        case 664: break;
        case 397: 
          {  return TOKEN_LITERAL_switch;  }
        case 665: break;
        case 400: 
          {  return TOKEN_LITERAL_return;  }
        case 666: break;
        case 402: 
          {  return TOKEN_LITERAL_throws;  }
        case 667: break;
        case 411: 
          {  return TOKEN_LITERAL_public;  }
        case 668: break;
        case 415: 
          {  return TOKEN_LITERAL_import;  }
        case 669: break;
        case 417: 
          {  return TOKEN_LITERAL_native;  }
        case 670: break;
        case 424: 
          {  return TOKEN_LITERAL_deploy;  }
        case 671: break;
        case 427: 
          {  return TOKEN_LITERAL_double;  }
        case 672: break;
        case 438: 
          {  return TOKEN_LITERAL_extends;  }
        case 673: break;
        case 443: 
          {  return TOKEN_LITERAL_package;  }
        case 674: break;
        case 447: 
          {  return TOKEN_LITERAL_private;  }
        case 675: break;
        case 457: 
          {  return TOKEN_LITERAL_boolean;  }
        case 676: break;
        case 458: 
          {  return TOKEN_LITERAL_finally;  }
        case 677: break;
        case 461: 
          {  return TOKEN_LITERAL_default;  }
        case 678: break;
        case 463: 
          {  return TOKEN_LITERAL_virtual;  }
        case 679: break;
        case 464: 
          {  return TOKEN_LITERAL_wrappee;  }
        case 680: break;
        case 465: 
          {  return TOKEN_ATASSERT;  }
        case 681: break;
        case 27: 
          {  if(typePatternExpected) {
  						yybegin(TYPEPATTERN);
  						pattern.setLength(0);
  					  } else {
  					  	return TOKEN_COLON;
  					  }
  					 }
        case 682: break;
        case 391: 
          {  
				  if (getCompiler().getSourceVersion() >=  KjcEnvironment.SOURCE_1_4) { 
				    return TOKEN_JAVAASSERT; 
				  } else { 
				    reportTrouble(new CWarning(getTokenReference(),
					                       KjcMessages.ASSERT_AS_IDENTIFIER));
				    return new CToken(IDENT, yytext().intern()); 
				  } 
				 }
        case 683: break;
        case 160: 
        case 168: 
        case 256: 
          { 
				  int		val;

				  val = Integer.parseInt(yytext().substring(1), 8);
				  string.append((char)val);
				 }
        case 684: break;
        case 74: 
        case 75: 
          { 
				  yybegin(oldState);
				  incrementLine();
				  addComment(new JavaStyleComment(string.toString(), true, false, false));
				 }
        case 685: break;
        case 70: 
        case 71: 
          { 
				  incrementLine();
				  string.append(yytext());
				 }
        case 686: break;
        case 182: 
          { 
				  yybegin(oldState);

				  if (string.length() > 0 && string.charAt(0) == '*') {
				    //!!! graf 001222: first '*' should be removed
				    addComment(new JavadocComment(string.toString(), false, false));
				  } else {
				    addComment(new JavaStyleComment(string.toString(), false, false, false));
				  }
				 }
        case 687: break;
        case 258: 
          { 
				  yybegin(YYINITIAL);

				  int		val;

				  val = Integer.parseInt(yytext().substring(1, yylength()-1), 8);
				  return buildCharacterLiteral((char)val);
				 }
        case 688: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case TRADITIONALCOMMENT:
              { 
				  reportTrouble(CompilerMessages.EOF_IN_TRADITIONAL_COMMENT, null);
				  return TOKEN_EOF;
				 }
            case 521: break;
            case ENDOFLINECOMMENT:
              { 
				  reportTrouble(new CWarning(getTokenReference(),
							     CompilerMessages.EOF_IN_ENDOFLINE_COMMENT));
				  return TOKEN_EOF;
				 }
            case 522: break;
            default:
              {   return TOKEN_EOF;
 }
            }
          } else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
