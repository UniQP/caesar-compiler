/* The following code was generated by JFlex 1.3.2 on 28.02.04 14:25 */

/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: CaesarScanner.java,v 1.22 2004-02-28 17:58:05 ostermann Exp $
 */

package org.caesarj.compiler;


import org.caesarj.util.CWarning;
import org.caesarj.util.*;
import org.caesarj.compiler.ast.JavaStyleComment;
import org.caesarj.compiler.ast.JavadocComment;
import org.caesarj.compiler.constants.*;
import org.caesarj.tools.antlr.extra.*;





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 28.02.04 14:25 from the specification file
 * <tt>file:/C:/dev/eclipse/workspace/Caesar/cc/caesar.flex</tt>
 */
public class CaesarScanner extends org.caesarj.tools.antlr.extra.Scanner implements CaesarTokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int TYPEPATTERN = 1;
  final public static int STRINGLITERAL = 2;
  final public static int YYINITIAL = 0;
  final public static int TRADITIONALCOMMENT = 4;
  final public static int ENDOFLINECOMMENT = 5;
  final public static int CHARLITERAL = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\100\1\1\1\3\1\0\1\1\1\2\16\100\4\0\1\1\1\60"+
    "\1\71\1\44\1\77\1\62\1\46\1\72\1\61\1\66\1\70\1\10"+
    "\1\52\1\53\1\54\1\67\1\73\3\102\4\6\2\4\1\27\1\30"+
    "\1\57\1\45\1\50\1\63\1\0\3\5\1\76\1\7\1\76\5\77"+
    "\1\74\13\77\1\75\2\77\1\55\1\101\1\64\1\51\1\77\1\0"+
    "\1\24\1\20\1\16\1\25\1\21\1\22\1\36\1\34\1\13\1\77"+
    "\1\32\1\26\1\37\1\14\1\12\1\11\1\77\1\23\1\31\1\15"+
    "\1\17\1\40\1\41\1\35\1\33\1\42\1\56\1\47\1\65\1\43"+
    "\41\100\2\0\4\77\4\0\1\77\12\0\1\77\4\0\1\77\5\0"+
    "\27\77\1\0\37\77\1\0\u0128\77\2\0\22\77\34\0\136\77\2\0"+
    "\11\77\2\0\7\77\16\0\2\77\16\0\5\77\11\0\1\77\21\0"+
    "\117\100\21\0\3\100\27\0\1\77\13\0\1\77\1\0\3\77\1\0"+
    "\1\77\1\0\24\77\1\0\54\77\1\0\10\77\2\0\32\77\14\0"+
    "\202\77\1\0\4\100\5\0\71\77\2\0\2\77\2\0\2\77\3\0"+
    "\46\77\2\0\2\77\67\0\46\77\2\0\1\77\7\0\47\77\11\0"+
    "\21\100\1\0\27\100\1\0\3\100\1\0\1\100\1\0\2\100\1\0"+
    "\1\100\13\0\33\77\5\0\3\77\56\0\32\77\5\0\13\77\13\100"+
    "\12\0\12\100\6\0\1\100\143\77\1\0\1\77\7\100\2\0\6\100"+
    "\2\77\2\100\1\0\4\100\2\0\12\100\3\77\22\0\1\100\1\77"+
    "\1\100\33\77\3\0\33\100\65\0\46\77\13\100\u0150\0\3\100\1\0"+
    "\65\77\2\0\1\100\1\77\20\100\2\0\1\77\4\100\3\0\12\77"+
    "\2\100\2\0\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0"+
    "\26\77\1\0\7\77\1\0\1\77\3\0\4\77\2\0\1\100\1\0"+
    "\7\100\2\0\2\100\2\0\3\100\11\0\1\100\4\0\2\77\1\0"+
    "\3\77\2\100\2\0\12\100\4\77\16\0\1\100\2\0\6\77\4\0"+
    "\2\77\2\0\26\77\1\0\7\77\1\0\2\77\1\0\2\77\1\0"+
    "\2\77\2\0\1\100\1\0\5\100\4\0\2\100\2\0\3\100\13\0"+
    "\4\77\1\0\1\77\7\0\14\100\3\77\14\0\3\100\1\0\7\77"+
    "\1\0\1\77\1\0\3\77\1\0\26\77\1\0\7\77\1\0\2\77"+
    "\1\0\5\77\2\0\1\100\1\77\10\100\1\0\3\100\1\0\3\100"+
    "\2\0\1\77\17\0\1\77\5\0\12\100\21\0\3\100\1\0\10\77"+
    "\2\0\2\77\2\0\26\77\1\0\7\77\1\0\2\77\2\0\4\77"+
    "\2\0\1\100\1\77\6\100\3\0\2\100\2\0\3\100\10\0\2\100"+
    "\4\0\2\77\1\0\3\77\4\0\12\100\22\0\2\100\1\0\6\77"+
    "\3\0\3\77\1\0\4\77\3\0\2\77\1\0\1\77\1\0\2\77"+
    "\3\0\2\77\3\0\3\77\3\0\10\77\1\0\3\77\4\0\5\100"+
    "\3\0\3\100\1\0\4\100\11\0\1\100\17\0\11\100\21\0\3\100"+
    "\1\0\10\77\1\0\3\77\1\0\27\77\1\0\12\77\1\0\5\77"+
    "\4\0\7\100\1\0\3\100\1\0\4\100\7\0\2\100\11\0\2\77"+
    "\4\0\12\100\22\0\2\100\1\0\10\77\1\0\3\77\1\0\27\77"+
    "\1\0\12\77\1\0\5\77\4\0\7\100\1\0\3\100\1\0\4\100"+
    "\7\0\2\100\7\0\1\77\1\0\2\77\4\0\12\100\22\0\2\100"+
    "\1\0\10\77\1\0\3\77\1\0\27\77\1\0\20\77\4\0\6\100"+
    "\2\0\3\100\1\0\4\100\11\0\1\100\10\0\2\77\4\0\12\100"+
    "\22\0\2\100\1\0\22\77\3\0\30\77\1\0\11\77\1\0\1\77"+
    "\2\0\7\77\3\0\1\100\4\0\6\100\1\0\1\100\1\0\10\100"+
    "\22\0\2\100\15\0\60\77\1\100\2\77\7\100\4\0\10\77\10\100"+
    "\1\0\12\100\47\0\2\77\1\0\1\77\2\0\2\77\1\0\1\77"+
    "\2\0\1\77\6\0\4\77\1\0\7\77\1\0\3\77\1\0\1\77"+
    "\1\0\1\77\2\0\2\77\1\0\4\77\1\100\2\77\6\100\1\0"+
    "\2\100\1\77\2\0\5\77\1\0\1\77\1\0\6\100\2\0\12\100"+
    "\2\0\2\77\42\0\1\77\27\0\2\100\6\0\12\100\13\0\1\100"+
    "\1\0\1\100\1\0\1\100\4\0\2\100\10\77\1\0\42\77\6\0"+
    "\24\100\1\0\2\100\4\77\4\0\10\100\1\0\44\100\11\0\1\100"+
    "\71\0\42\77\1\0\5\77\1\0\2\77\1\0\7\100\3\0\4\100"+
    "\6\0\12\100\6\0\6\77\4\100\106\0\46\77\12\0\47\77\11\0"+
    "\132\77\5\0\104\77\5\0\122\77\6\0\7\77\1\0\77\77\1\0"+
    "\1\77\1\0\4\77\2\0\7\77\1\0\1\77\1\0\4\77\2\0"+
    "\47\77\1\0\1\77\1\0\4\77\2\0\37\77\1\0\1\77\1\0"+
    "\4\77\2\0\7\77\1\0\1\77\1\0\4\77\2\0\7\77\1\0"+
    "\7\77\1\0\27\77\1\0\37\77\1\0\1\77\1\0\4\77\2\0"+
    "\7\77\1\0\47\77\1\0\23\77\16\0\11\100\56\0\125\77\14\0"+
    "\u026c\77\2\0\10\77\12\0\32\77\5\0\113\77\225\0\64\77\40\100"+
    "\7\0\1\77\4\0\12\100\41\0\4\100\1\0\12\100\6\0\130\77"+
    "\10\0\51\77\1\100\u0556\0\234\77\4\0\132\77\6\0\26\77\2\0"+
    "\6\77\2\0\46\77\2\0\6\77\2\0\10\77\1\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\37\77\2\0\65\77\1\0\7\77\1\0"+
    "\1\77\3\0\3\77\1\0\7\77\3\0\4\77\2\0\6\77\4\0"+
    "\15\77\5\0\3\77\1\0\7\77\17\0\4\100\32\0\5\100\20\0"+
    "\2\77\51\0\6\100\17\0\1\77\40\0\20\77\40\0\15\100\4\0"+
    "\1\100\40\0\1\77\4\0\1\77\2\0\12\77\1\0\1\77\3\0"+
    "\5\77\6\0\1\77\1\0\1\77\1\0\1\77\1\0\4\77\1\0"+
    "\3\77\1\0\7\77\46\0\44\77\u0e81\0\3\77\31\0\11\77\6\100"+
    "\1\0\5\77\2\0\3\77\6\0\124\77\4\0\2\100\2\0\2\77"+
    "\2\0\136\77\6\0\50\77\4\0\136\77\21\0\30\77\u0248\0\u19b6\77"+
    "\112\0\u51a6\77\132\0\u048d\77\u0773\0\u2ba4\77\u215c\0\u012e\77\322\0\7\77"+
    "\14\0\5\77\5\0\1\77\1\100\12\77\1\0\15\77\1\0\5\77"+
    "\1\0\1\77\1\0\2\77\1\0\2\77\1\0\154\77\41\0\u016b\77"+
    "\22\0\100\77\2\0\66\77\50\0\14\77\44\0\4\100\17\0\2\77"+
    "\30\0\3\77\31\0\1\77\6\0\3\77\1\0\1\77\1\0\207\77"+
    "\2\0\1\100\4\0\1\77\13\0\12\100\7\0\32\77\4\0\1\77"+
    "\1\0\32\77\12\0\132\77\3\0\6\77\2\0\6\77\2\0\6\77"+
    "\2\0\3\77\3\0\2\77\3\0\2\77\22\0\3\100\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    67,   134,   201,   268,   335,   402,   402,   469,   402, 
      536,   603,   670,   737,   804,   871,   938,  1005,  1072,  1139, 
     1206,  1273,  1340,  1407,  1474,   402,   402,  1541,  1608,  1675, 
     1742,   402,   402,  1809,  1876,  1943,  2010,  2077,   402,  2144, 
     2211,   402,   402,  2278,  2345,   402,  2412,   402,   402,   402, 
      402,  2479,  2546,   402,   402,  2613,  2680,  2747,  2814,  2881, 
     2948,   402,   402,  3015,  3082,  3149,   402,  3216,  3283,  3350, 
      402,  3417,  3484,  3551,   402,  3618,   402,   402,  3685,   402, 
      402,  3752,  3819,  3886,  3953,  4020,   603,  4087,  4154,  4221, 
     4288,  4355,  4422,  4489,  4556,  4623,  4690,  4757,  4824,  4891, 
     4958,  5025,  5092,  5159,  5226,  5293,  5360,  5427,  5494,  5561, 
     5628,  5695,  5762,  5829,  5896,  5963,  6030,  6097,  6164,  6231, 
     6298,  6365,  6432,  6499,  6566,   402,   402,   402,   402,   402, 
      402,  6633,   402,   402,   402,   402,  6700,   402,   402,   402, 
      402,   402,   402,  6767,  6834,  6901,   402,   402,   402,   402, 
     6968,   402,   402,   402,   402,   402,   402,   402,  7035,   402, 
      402,  7102,  7169,  7236,  7303,  7370,  7437,  7504,  7571,  7638, 
     7705,   402,   402,  3417,  7772,  7839,  7906,  7973,  8040,  8107, 
     8174,  8241,  8308,  8375,  8442,  8509,   603,  8576,  8643,  8710, 
      603,  8777,  8844,  8911,  8978,  9045,  9112,  9179,  9246,  9313, 
     9380,  9447,  9514,  9581,  9648,  9715,  9782,  9849,   603,  9916, 
     9983, 10050, 10117, 10184, 10251, 10318, 10385, 10452, 10519, 10586, 
    10653, 10720, 10787, 10854, 10921, 10988, 11055, 11122, 11189, 11256, 
    11323, 11390,   402, 11457,   402, 11524,   402, 11591,   402,   402, 
      402,   402,   402,   402,   402,   402,  7102,   402, 11658, 11725, 
    11792, 11859, 11926, 11993, 12060, 12127, 12194, 12261, 12328,   603, 
    12395,   603, 12462,   603, 12529, 12596, 12663, 12730, 12797, 12864, 
      603, 12931,   603, 12998, 13065, 13132, 13199,   603,   603, 13266, 
    13333, 13400, 13467, 13534, 13601, 13668, 13735, 13802, 13869, 13936, 
    14003, 14070,   603, 14137, 14204, 14271, 14338, 14405, 14472,   603, 
      603, 14539, 14606, 14673,   402, 14740, 14807, 14874, 14941, 15008, 
    15075, 15142, 15209, 15276, 15343, 15410, 15477, 15544, 15611, 15678, 
    15745,   603, 15812, 15879,   603,   603, 15946,   603, 16013,   603, 
    16080, 16147, 16214,   603,   603, 16281, 16348,   603, 16415, 16482, 
    16549, 16616, 16683, 16750, 16817,   603, 16884,   603, 16951, 17018, 
    17085,   603,   603, 17152,   603, 17219, 17286, 17353, 17420, 17487, 
    17554, 17621, 17688,   603, 17755,   603, 17822, 17889,   603, 17956, 
    18023,   603, 18090,   603, 18157, 18224, 18291, 18358, 18425,   603, 
      603, 18492, 18559, 18626, 18693,   603, 18760,   603, 18827, 18894, 
    18961, 19028, 19095, 19162,   603, 19229,   603, 19296, 19363, 19430, 
    19497, 19564, 19631, 19698,   603, 19765,   603,   603, 19832, 19899, 
    19966,   603,   603, 20033, 20100, 20167,   603,   603, 20234,   603, 
      603, 20301, 20368, 20435, 20502, 20569, 20636,   603,   603, 20703, 
      603, 20770,   603,   603,   603, 20837,   603,   603, 20904, 20971, 
      603, 21038, 21105,   603, 21172,   603, 21239,   603,   603,   603, 
      603, 21306, 21373, 21440, 21507, 21574,   603,   603
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\13\1\14"+
    "\1\15\1\16\1\14\1\17\1\20\1\21\1\22\1\14"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\4\14\1\35\1\14\1\36\1\37\1\14"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\4\14\2\7\1\13\2\71\1\72\25\71\1\7"+
    "\25\71\1\7\10\71\1\73\13\71\2\74\1\75\1\76"+
    "\65\74\1\77\7\74\1\100\1\74\2\101\1\102\1\103"+
    "\66\101\1\7\6\101\1\104\1\101\2\105\1\106\1\107"+
    "\64\105\1\110\12\105\2\111\1\112\1\113\77\111\106\0"+
    "\1\12\103\0\1\13\1\0\1\13\1\114\11\0\1\114"+
    "\1\115\2\0\1\115\1\116\25\0\1\117\16\0\1\13"+
    "\1\116\1\0\1\115\3\0\1\13\4\0\4\14\1\0"+
    "\16\14\2\0\12\14\30\0\6\14\1\0\1\14\10\0"+
    "\1\120\34\0\1\121\41\0\4\14\1\0\1\14\1\122"+
    "\4\14\1\123\3\14\1\124\1\125\2\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\3\14"+
    "\1\126\5\14\1\127\4\14\2\0\6\14\1\130\3\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\6\14"+
    "\1\131\1\14\1\132\2\14\1\133\2\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\12\14"+
    "\1\134\3\14\2\0\3\14\1\135\6\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\14\1\136\3\14"+
    "\1\137\5\14\1\140\1\14\1\141\2\0\3\14\1\142"+
    "\6\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\143\1\144\5\14\1\145\1\14\1\146\3\14"+
    "\2\0\2\14\1\147\7\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\15\14\1\150\2\0\4\14\1\151"+
    "\5\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\152\1\153\10\14\1\154\1\14\1\155\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\156\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\7\14\1\157\1\14\1\160"+
    "\1\161\3\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\14\1\162\6\14\1\163\5\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\14\1\164\14\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\4\14\1\165\1\14"+
    "\1\166\7\14\2\0\2\14\1\167\1\170\4\14\1\171"+
    "\1\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\172\14\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\1\14\1\173\14\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\12\14\1\174\3\14\2\0\3\14\1\175\6\14\30\0"+
    "\6\14\1\0\1\14\45\0\1\176\102\0\1\177\1\200"+
    "\101\0\1\201\1\0\1\202\100\0\1\203\2\0\1\204"+
    "\77\0\1\205\102\0\1\206\5\0\1\207\33\0\1\117"+
    "\1\0\1\117\64\0\1\117\6\0\1\117\45\0\1\210"+
    "\11\0\1\211\70\0\1\212\102\0\1\213\102\0\1\214"+
    "\21\0\1\215\1\216\57\0\1\217\41\0\1\220\1\0"+
    "\1\221\1\114\11\0\1\114\1\115\2\0\1\115\1\116"+
    "\6\0\1\222\16\0\1\117\16\0\1\221\1\116\1\222"+
    "\1\115\3\0\1\221\30\0\1\223\25\0\1\223\27\0"+
    "\1\12\24\0\1\223\25\0\1\223\113\0\1\224\1\225"+
    "\12\0\2\74\2\0\65\74\1\0\7\74\1\0\1\74"+
    "\3\0\1\76\77\0\3\226\1\0\2\226\1\227\5\226"+
    "\1\230\1\231\2\226\1\232\1\226\1\233\1\234\45\226"+
    "\1\235\1\236\1\237\5\226\1\240\1\237\72\0\1\241"+
    "\13\0\1\103\77\0\3\226\1\0\2\226\1\242\5\226"+
    "\1\243\1\244\2\226\1\245\1\226\1\246\1\247\45\226"+
    "\1\250\1\251\1\252\5\226\1\253\1\252\2\105\2\0"+
    "\64\105\1\0\12\105\3\0\1\107\77\0\2\254\1\106"+
    "\1\107\63\254\1\255\1\256\12\254\2\111\2\0\77\111"+
    "\3\0\1\113\103\0\1\257\1\0\1\257\1\0\1\260"+
    "\42\0\1\260\17\0\1\257\6\0\1\257\4\0\1\117"+
    "\1\0\1\117\1\114\11\0\1\114\1\115\2\0\1\115"+
    "\45\0\1\117\2\0\1\115\3\0\1\117\4\0\4\14"+
    "\1\0\2\14\1\261\13\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\7\14\1\262\6\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\14\1\263\1\264\5\14\1\265\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\5\14\1\266\10\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\4\14\1\267\11\14\2\0"+
    "\1\270\11\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\271\15\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\272\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\10\14\1\273\1\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\274\11\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\6\14"+
    "\1\275\4\14\1\276\2\14\2\0\2\14\1\277\7\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\300\7\14\1\301\3\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\3\14\1\302\11\14"+
    "\1\303\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\15\14\1\304\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\4\14\1\305\11\14"+
    "\2\0\1\306\11\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\13\14\1\307\2\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\13\14\1\310"+
    "\2\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\1\14\1\311\14\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\3\14\1\312"+
    "\12\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\11\14\1\313\4\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\314"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\315\11\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\16\14\2\0"+
    "\1\316\11\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\317\3\14\1\320\11\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\12\14\1\321"+
    "\3\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\3\14\1\322\12\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\15\14\1\323"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\14\1\324\14\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\4\14\1\325\11\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\16\14\2\0\1\326\11\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\4\14\1\327\11\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\330\14\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\331\7\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\332\4\14\1\333\3\14\1\334\4\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\3\14"+
    "\1\335\12\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\12\14\1\336\1\337\2\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\340\15\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\341\12\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\1\14"+
    "\1\342\14\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\343\13\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\4\14"+
    "\1\344\11\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\345\12\14\1\346\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\13\14\1\347\2\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\350\13\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\45\0\1\351\2\0"+
    "\1\352\77\0\1\353\41\0\1\220\1\0\1\220\1\114"+
    "\11\0\1\114\1\115\2\0\1\115\26\0\1\117\16\0"+
    "\1\220\2\0\1\115\3\0\1\220\4\0\1\220\1\0"+
    "\1\221\1\114\11\0\1\114\1\115\2\0\1\115\1\116"+
    "\25\0\1\117\16\0\1\221\1\116\1\0\1\115\3\0"+
    "\1\221\4\0\4\354\6\0\1\354\1\0\3\354\1\0"+
    "\2\354\45\0\1\354\2\0\1\354\3\0\1\354\6\0"+
    "\1\355\64\0\1\355\6\0\1\355\6\0\1\227\64\0"+
    "\1\227\6\0\1\227\6\0\1\356\63\0\1\357\1\356"+
    "\6\0\1\356\72\0\1\360\102\0\1\361\102\0\1\362"+
    "\102\0\1\363\102\0\1\364\102\0\1\365\102\0\1\366"+
    "\16\0\1\367\63\0\1\357\1\367\6\0\1\367\72\0"+
    "\1\370\14\0\1\257\1\0\1\257\13\0\1\115\2\0"+
    "\1\115\45\0\1\257\2\0\1\115\3\0\1\257\4\0"+
    "\1\257\1\0\1\257\64\0\1\257\6\0\1\257\4\0"+
    "\4\14\1\0\3\14\1\371\12\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\15\14\1\372"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\4\14\1\373\11\14\2\0\7\14\1\374\2\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\7\14\1\375\2\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\5\14\1\376\10\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\1\14\1\377\10\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u0100\5\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\4\14"+
    "\1\u0101\11\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\14\1\u0102\13\14\1\u0103\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\15\14\1\u0104\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\u0105\13\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\u0106\5\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u0107\12\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\1\u0108\11\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\1\14\1\u0109\14\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u010a"+
    "\11\14\2\0\1\u010b\11\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\15\14\1\u010c\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\13\14\1\u010d"+
    "\2\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\5\14\1\u010e\10\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u010f"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\2\0\1\u0110\11\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\12\14\1\u0111\3\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\15\14\1\u0112\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\14\14\1\u0113\1\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\u0114\14\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\13\14\1\u0115\2\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u0116\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u0117\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u0118\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u0119\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\13\14\1\u011a\2\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\16\14\2\0\1\u011b\11\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\13\14"+
    "\1\u011c\2\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\6\14\1\u011d\7\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\4\14"+
    "\1\u011e\11\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u011f\5\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\6\14"+
    "\1\u0120\7\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\7\14\1\u0121\6\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\15\14"+
    "\1\u0122\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\15\14\1\u0123\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\13\14\1\u0124\2\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\16\14\2\0\5\14\1\u0125\4\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\2\14\1\u0126\13\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\4\14\1\u0127\11\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\10\14\1\u0128\5\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\5\14\1\u0129\10\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\12\14\1\u012a\3\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\4\14\1\u012b\11\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\1\14\1\u012c\14\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\14\14\1\u012d\1\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\13\14\1\u012e\2\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\1\u012f\15\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\u0130\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\45\0\1\u0131\41\0\4\354"+
    "\6\0\1\354\1\0\3\354\1\0\2\354\1\116\44\0"+
    "\1\354\1\116\1\0\1\354\3\0\1\354\72\0\1\357"+
    "\14\0\4\14\1\0\4\14\1\u0132\11\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u0133\13\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u0134\5\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u0135\13\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\u0136\10\14\1\u0137\2\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\10\14\1\u0138\5\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\13\14\1\u0139\2\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\12\14\1\u013a\3\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\13\14\1\u013b\2\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\12\14\1\u013c\3\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\10\14\1\u013d\5\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\16\14\2\0\7\14\1\u013e\2\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\16\14\2\0\1\u013f"+
    "\11\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\2\0\10\14\1\u0140\1\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u0141\13\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u0142\11\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\13\14\1\u0143\2\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\2\0\1\u0144\11\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\16\14\2\0\3\14\1\u0145\6\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\1\u0146\11\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\u0147\5\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\16\14\2\0"+
    "\1\u0148\11\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\12\14\1\u0149\3\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\16\14\2\0\1\14"+
    "\1\u014a\10\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\5\14\1\u014b\10\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\3\14\1\u014c\12\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\15\14\1\u014d\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u014e\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u014f\11\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\12\14\1\u0150\3\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\12\14\1\u0151\3\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\12\14\1\u0152\3\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\3\14\1\u0153\12\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\15\14\1\u0154\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\1\14"+
    "\1\u0155\14\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\13\14\1\u0156\2\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\6\14"+
    "\1\u0157\7\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\5\14\1\u0158\10\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\2\14"+
    "\1\u0159\13\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\12\14\1\u015a\3\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\3\14\1\u015b\6\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\u015c\11\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\5\14"+
    "\1\u015d\10\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\u015e\11\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\1\u015f"+
    "\15\14\2\0\1\u0160\11\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u0161\5\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\5\14"+
    "\1\u0162\10\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\5\14\1\u0163\10\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\5\14"+
    "\1\u0164\10\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\14\14\1\u0165\1\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\15\14"+
    "\1\u0166\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u0167\11\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\14\14\1\u0168"+
    "\1\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\2\0\5\14\1\u0169\4\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\11\14\1\u016a"+
    "\4\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\3\14\1\u016b\12\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u016c"+
    "\11\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\2\0\6\14\1\u016d\3\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u016e"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\2\14\1\u016f\13\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u0170"+
    "\13\14\2\0\1\u0171\11\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u0172\12\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\7\14"+
    "\1\u0173\6\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\16\14\2\0\1\u0174\11\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\13\14\1\u0175"+
    "\2\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\u0176\5\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u0177"+
    "\11\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\14\14\1\u0178\1\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\15\14\1\u0179"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\3\14\1\u017a\12\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\13\14\1\u017b\2\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\14\14\1\u017c\1\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\10\14\1\u017d\5\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\16\14\2\0\2\14\1\u017e\7\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\12\14\1\u017f\3\14"+
    "\2\0\12\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\15\14\1\u0180\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\4\14\1\u0181\11\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\5\14\1\u0182\10\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\12\14\1\u0183\3\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\16\14\2\0\3\14\1\u0184\6\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\2\14\1\u0185\13\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u0186\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\u0187\7\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\4\14\1\u0188\11\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u0189\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u018a\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u018b\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u018c\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u018d\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\13\14\1\u018e\2\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\5\14\1\u018f\10\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u0190\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u0191\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\3\14\1\u0192\12\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\6\14\1\u0193\7\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\u0194\14\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\3\14\1\u0195\12\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\10\14\1\u0196\5\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\16\14\2\0\1\u0197\11\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\16\14"+
    "\2\0\2\14\1\u0198\7\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\2\14\1\u0199\13\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\5\14"+
    "\1\u019a\10\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\10\14\1\u019b\5\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\u019c\5\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\4\14\1\u019d\11\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\11\14"+
    "\1\u019e\4\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\1\14\1\u019f\14\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\15\14"+
    "\1\u01a0\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\u01a1\5\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u01a2"+
    "\11\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\10\14\1\u01a3\5\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\14\14\1\u01a4"+
    "\1\14\2\0\1\u01a5\11\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\16\14\2\0\5\14\1\u01a6\4\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\3\14"+
    "\1\u01a7\12\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\5\14\1\u01a8\10\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\u01a9\5\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u01aa\12\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\3\14"+
    "\1\u01ab\12\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\16\14\2\0\5\14\1\u01ac\4\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\10\14"+
    "\1\u01ad\5\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\12\14\1\u01ae\3\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\14\14"+
    "\1\u01af\1\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\3\14\1\u01b0\12\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\4\14"+
    "\1\u01b1\11\14\2\0\12\14\30\0\6\14\1\0\1\14"+
    "\4\0\4\14\1\0\14\14\1\u01b2\1\14\2\0\12\14"+
    "\30\0\6\14\1\0\1\14\4\0\4\14\1\0\1\u01b3"+
    "\15\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\3\14\1\u01b4\12\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u01b5"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\14\14\1\u01b6\1\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u01b7"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\5\14\1\u01b8\10\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u01b9"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\1\14\1\u01ba\14\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\4\14\1\u01bb"+
    "\11\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\4\14\1\u01bc\11\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\13\14\1\u01bd"+
    "\2\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\16\14\2\0\5\14\1\u01be\4\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\2\14\1\u01bf"+
    "\13\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\14\14\1\u01c0\1\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\10\14\1\u01c1"+
    "\5\14\2\0\12\14\30\0\6\14\1\0\1\14\4\0"+
    "\4\14\1\0\11\14\1\u01c2\4\14\2\0\12\14\30\0"+
    "\6\14\1\0\1\14\4\0\4\14\1\0\16\14\2\0"+
    "\1\u01c3\11\14\30\0\6\14\1\0\1\14\4\0\4\14"+
    "\1\0\4\14\1\u01c4\11\14\2\0\12\14\30\0\6\14"+
    "\1\0\1\14\4\0\4\14\1\0\16\14\2\0\11\14"+
    "\1\u01c5\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\2\14\1\u01c6\13\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\10\14\1\u01c7\5\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\1\14\1\u01c8\14\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14\4\0\4\14\1\0\14\14\1\u01c9\1\14\2\0"+
    "\12\14\30\0\6\14\1\0\1\14\4\0\4\14\1\0"+
    "\3\14\1\u01ca\12\14\2\0\12\14\30\0\6\14\1\0"+
    "\1\14";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String[] YY_ERROR_MSG = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  9,  9,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  1,  9, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  9,  9,  1,  1,  9,  1,  9, 
     9,  9,  9,  1,  1,  9,  9,  1,  3,  3,  1,  1,  1,  9,  9,  1, 
     1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  9,  0,  9,  9,  1,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9, 
     9,  9,  9,  1,  9,  9,  9,  9,  1,  9,  9,  9,  9,  9,  9,  0, 
     1,  0, 13,  9,  9,  9,  1,  9,  9,  9,  9,  9,  9,  9,  1,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  0,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  9,  0,  9,  9, 
     9,  9,  9,  9,  9,  9,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input buffer */
  private org.caesarj.tools.antlr.extra.InputBuffer buffer;

  /** the input device : unused but referenced by generated constructors */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] yy_buffer = null;

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  public CaesarScanner(CompilerBase compiler, InputBuffer buffer) {
    super(compiler, buffer);
    this.buffer = buffer;
  }

  /**
   * Creates a character literal token.
   */
  private CToken buildCharacterLiteral(char image) {
    return new CToken(CHARACTER_LITERAL, String.valueOf(image));
  }


  private final StringBuffer	string = new StringBuffer();
  
  private final StringBuffer	pattern = new StringBuffer();
  
  private boolean typePatternExpected;
  
  private int oldState;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaesarScanner(java.io.Reader in) {
    // dummy: we provide our own constructor
  super(null, null);
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CaesarScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[21641];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1658) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) { return yy_buffer[yy_currentPos++]; }

    /* if the eof is reached, we don't need to work hard */
    if (yy_atEOF) { return YYEOF; }

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char[]  newBuffer = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = buffer.read(yy_buffer, yy_endRead, yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) { return YYEOF; }

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

  /**
   * Exports the buffer state.
   */
  public org.caesarj.tools.antlr.extra.InputBufferState getBufferState() {
    org.caesarj.tools.antlr.extra.InputBufferState	state;

    state = new org.caesarj.tools.antlr.extra.InputBufferState(yy_buffer,
								   yy_startRead,
								   yy_endRead,
								   yy_currentPos,
								   yy_markedPos,
								   yy_pushbackPos,
								   yy_atEOF);
    // invalidate buffer
    yy_buffer = null;
    return state;
  }

  /**
   * Imports the buffer state, if exists, otherwise initialise buffer.
   */
  private void initBufferState() {
    org.caesarj.tools.antlr.extra.InputBufferState	state;

    state = buffer.getBufferState(this);
    if (state == null) {
      yy_buffer = new char[YY_BUFFERSIZE];
      // other variables initialised to their default values
    } else {
      yy_buffer = state.buffer;
      yy_startRead = state.startRead;
      yy_endRead = state.endRead;
      yy_currentPos = state.currentPos;
      yy_markedPos = state.markedPos;
      yy_pushbackPos = state.pushbackPos;
      yy_atEOF = state.atEOF;
    }
  }

  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null) {
      yy_reader.close();
    }
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }

  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() ) {
      yy_ScanError(YY_PUSHBACK_2BIG);
    }

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.caesarj.tools.antlr.runtime.Token nextTokenImpl() throws java.io.IOException {
    int yy_input;
    int yy_action;

    yy_pushbackPos = -1;
    boolean yy_was_pushback;

    if (yy_buffer == null) {
      initBufferState();
    }

    while (true) {

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) { break yy_forAction; }

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 2) > 0 )
            yy_pushbackPos = yy_currentPos;

          if ( (yy_attributes & 1) > 0 ) {
            yy_was_pushback = (yy_attributes & 4) > 0;
            yy_action = yy_state;
            yy_markedPos = yy_currentPos;
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }

      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos;

      switch (yy_action) {

        case 411: 
          { yybegin(TYPEPATTERN); pattern.setLength(0); return TOKEN_LITERAL_declare; }
        case 459: break;
        case 26: 
          { typePatternExpected = false; return TOKEN_SEMI; }
        case 460: break;
        case 337: 
          { typePatternExpected = true; return TOKEN_LITERAL_after; }
        case 461: break;
        case 373: 
          { typePatternExpected = true; return TOKEN_LITERAL_before; }
        case 462: break;
        case 379: 
          { typePatternExpected = true; return TOKEN_LITERAL_around; }
        case 463: break;
        case 417: 
          { typePatternExpected = true; return TOKEN_LITERAL_pointcut; }
        case 464: break;
        case 457: 
          {  return TOKEN_LITERAL_collaboration;  }
        case 465: break;
        case 456: 
          {  return TOKEN_LITERAL_synchronized;  }
        case 466: break;
        case 450: 
          {  return TOKEN_LITERAL_implements;  }
        case 467: break;
        case 449: 
          {  return TOKEN_LITERAL_instanceof;  }
        case 468: break;
        case 448: 
          {  return TOKEN_LITERAL_precedence;  }
        case 469: break;
        case 447: 
          {  return TOKEN_LITERAL_privileged;  }
        case 470: break;
        case 445: 
          {  return TOKEN_LITERAL_returning;  }
        case 471: break;
        case 443: 
          {  return TOKEN_LITERAL_transient;  }
        case 472: break;
        case 440: 
          {  return TOKEN_LITERAL_interface;  }
        case 473: break;
        case 437: 
          {  return TOKEN_LITERAL_protected;  }
        case 474: break;
        case 436: 
          {  return TOKEN_LITERAL_volatile;  }
        case 475: break;
        case 434: 
          {  return TOKEN_LITERAL_strictfp;  }
        case 476: break;
        case 433: 
          {  return TOKEN_LITERAL_deployed;  }
        case 477: break;
        case 432: 
          {  return TOKEN_LITERAL_abstract;  }
        case 478: break;
        case 430: 
          {  return TOKEN_LITERAL_expected;  }
        case 479: break;
        case 154: 
          {  string.append('\f');  }
        case 480: break;
        case 153: 
          {  string.append('\b');  }
        case 481: break;
        case 152: 
          {  string.append('\t');  }
        case 482: break;
        case 151: 
          {  string.append('\n');  }
        case 483: break;
        case 149: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
          {  reportTrouble(Messages.BAD_ESCAPE_SEQUENCE, new Object[]{ yytext() });  }
        case 484: break;
        case 148: 
          {  oldState = yystate(); yybegin(TRADITIONALCOMMENT); string.setLength(0);  }
        case 485: break;
        case 147: 
          {  oldState = yystate(); yybegin(ENDOFLINECOMMENT); string.setLength(0);  }
        case 486: break;
        case 146: 
          {  typePatternExpected = false;
  					  oldState= YYINITIAL; 
  					  yybegin(YYINITIAL);
  					  pattern.append(yytext()); 
  					  return new CToken(TYPE_PATTERN, pattern.toString());  }
        case 487: break;
        case 142: 
          {  return TOKEN_STAR_ASSIGN;  }
        case 488: break;
        case 141: 
          {  yybegin(TRADITIONALCOMMENT); string.setLength(0);  }
        case 489: break;
        case 140: 
          {  yybegin(ENDOFLINECOMMENT); string.setLength(0);  }
        case 490: break;
        case 139: 
          {  return TOKEN_SLASH_ASSIGN;  }
        case 491: break;
        case 138: 
          {  return TOKEN_PERCENT_ASSIGN;  }
        case 492: break;
        case 137: 
          {  return TOKEN_NOT_EQUAL;  }
        case 493: break;
        case 136: 
          {  return TOKEN_SL;  }
        case 494: break;
        case 135: 
          {  return TOKEN_LE;  }
        case 495: break;
        case 134: 
          {  return TOKEN_DEC;  }
        case 496: break;
        case 133: 
          {  return TOKEN_MINUS_ASSIGN;  }
        case 497: break;
        case 132: 
          {  return TOKEN_BXOR_ASSIGN;  }
        case 498: break;
        case 131: 
          {  return TOKEN_SR;  }
        case 499: break;
        case 130: 
          {  return TOKEN_GE;  }
        case 500: break;
        case 129: 
          {  return TOKEN_LOR;  }
        case 501: break;
        case 128: 
          {  return TOKEN_BOR_ASSIGN;  }
        case 502: break;
        case 127: 
          {  return TOKEN_LAND;  }
        case 503: break;
        case 126: 
          {  return TOKEN_BAND_ASSIGN;  }
        case 504: break;
        case 125: 
          {  return TOKEN_EQUAL;  }
        case 505: break;
        case 113: 
          {  return TOKEN_LITERAL_do;  }
        case 506: break;
        case 86: 
          {  return TOKEN_LITERAL_if;  }
        case 507: break;
        case 80: 
          {  return TOKEN_PLUS_ASSIGN;  }
        case 508: break;
        case 79: 
          {  return TOKEN_INC;  }
        case 509: break;
        case 76: 
        case 78: 
        case 174: 
          {  return new CToken(REAL_LITERAL, yytext());  }
        case 510: break;
        case 65: 
        case 66: 
          {  reportTrouble(Messages.BAD_END_OF_LINE, new Object[]{ "character literal" });  }
        case 511: break;
        case 62: 
          {  yybegin(YYINITIAL); return new CToken(STRING_LITERAL, string.toString());  }
        case 512: break;
        case 39: 
          {  return TOKEN_MINUS;  }
        case 513: break;
        case 38: 
          {  return TOKEN_COMMA;  }
        case 514: break;
        case 37: 
          {  return TOKEN_BXOR;  }
        case 515: break;
        case 36: 
          {  return TOKEN_GT;  }
        case 516: break;
        case 35: 
          {  return TOKEN_BOR;  }
        case 517: break;
        case 34: 
          {  return TOKEN_BAND;  }
        case 518: break;
        case 33: 
          {  return TOKEN_ASSIGN;  }
        case 519: break;
        case 32: 
          {  return TOKEN_PATHMARKER;  }
        case 520: break;
        case 31: 
          {  return TOKEN_WDESTRUCTOR;  }
        case 521: break;
        case 6: 
        case 58: 
        case 63: 
        case 64: 
        case 67: 
        case 71: 
          {  reportTrouble(Messages.ILLEGAL_CHAR, new Object[]{ yytext() });  }
        case 522: break;
        case 7: 
          {  /* ignore */  }
        case 523: break;
        case 8: 
        case 9: 
          {  incrementLine();  }
        case 524: break;
        case 10: 
        case 55: 
        case 77: 
        case 144: 
        case 235: 
          {  return new CToken(INTEGER_LITERAL, yytext());  }
        case 525: break;
        case 11: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 183: 
        case 184: 
        case 185: 
        case 187: 
        case 188: 
        case 189: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 209: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 260: 
        case 262: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 269: 
        case 271: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 301: 
        case 302: 
        case 303: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 320: 
        case 322: 
        case 323: 
        case 326: 
        case 328: 
        case 330: 
        case 331: 
        case 335: 
        case 336: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 346: 
        case 348: 
        case 349: 
        case 350: 
        case 353: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 364: 
        case 366: 
        case 367: 
        case 369: 
        case 370: 
        case 372: 
        case 374: 
        case 375: 
        case 376: 
        case 378: 
        case 382: 
        case 383: 
        case 384: 
        case 386: 
        case 388: 
        case 389: 
        case 390: 
        case 391: 
        case 392: 
        case 393: 
        case 395: 
        case 397: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 405: 
        case 408: 
        case 409: 
        case 410: 
        case 413: 
        case 414: 
        case 415: 
        case 418: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 425: 
        case 426: 
        case 429: 
        case 431: 
        case 435: 
        case 438: 
        case 439: 
        case 441: 
        case 442: 
        case 444: 
        case 446: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
          {  return new CToken(IDENT, yytext().intern());  }
        case 526: break;
        case 12: 
          {  return TOKEN_PLUS;  }
        case 527: break;
        case 40: 
          {  return TOKEN_DOT;  }
        case 528: break;
        case 41: 
          {  return TOKEN_LBRACK;  }
        case 529: break;
        case 42: 
          {  return TOKEN_LCURLY;  }
        case 530: break;
        case 43: 
          {  return TOKEN_LT;  }
        case 531: break;
        case 44: 
          {  return TOKEN_LNOT;  }
        case 532: break;
        case 45: 
          {  return TOKEN_LPAREN;  }
        case 533: break;
        case 46: 
          {  return TOKEN_PERCENT;  }
        case 534: break;
        case 47: 
          {  return TOKEN_QUESTION;  }
        case 535: break;
        case 48: 
          {  return TOKEN_RBRACK;  }
        case 536: break;
        case 49: 
          {  return TOKEN_RCURLY;  }
        case 537: break;
        case 50: 
          {  return TOKEN_RPAREN;  }
        case 538: break;
        case 51: 
          {  return TOKEN_SLASH;  }
        case 539: break;
        case 52: 
          {  return TOKEN_STAR;  }
        case 540: break;
        case 53: 
          {  yybegin(STRINGLITERAL); string.setLength(0);  }
        case 541: break;
        case 54: 
          {  yybegin(CHARLITERAL);  }
        case 542: break;
        case 56: 
        case 57: 
          {  pattern.append(yytext());  }
        case 543: break;
        case 59: 
        case 68: 
        case 72: 
        case 171: 
          {  string.append(yytext());  }
        case 544: break;
        case 60: 
        case 61: 
          {  reportTrouble(Messages.BAD_END_OF_LINE, new Object[]{ "string literal" });  }
        case 545: break;
        case 155: 
          {  string.append('\r');  }
        case 546: break;
        case 156: 
          {  string.append('\"');  }
        case 547: break;
        case 157: 
          {  string.append('\'');  }
        case 548: break;
        case 159: 
          {  string.append('\\');  }
        case 549: break;
        case 160: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral(yytext().charAt(0));  }
        case 550: break;
        case 182: 
          {  return TOKEN_LITERAL_int;  }
        case 551: break;
        case 186: 
          {  return TOKEN_LITERAL_new;  }
        case 552: break;
        case 190: 
          {  return TOKEN_LITERAL_try;  }
        case 553: break;
        case 208: 
          {  return TOKEN_LITERAL_for;  }
        case 554: break;
        case 232: 
          {  return TOKEN_SR_ASSIGN;  }
        case 555: break;
        case 233: 
          {  return TOKEN_BSR;  }
        case 556: break;
        case 234: 
          {  return TOKEN_SL_ASSIGN;  }
        case 557: break;
        case 239: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\n');  }
        case 558: break;
        case 240: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\t');  }
        case 559: break;
        case 241: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\b');  }
        case 560: break;
        case 242: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\f');  }
        case 561: break;
        case 243: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\r');  }
        case 562: break;
        case 244: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\"');  }
        case 563: break;
        case 245: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\'');  }
        case 564: break;
        case 247: 
          {  yybegin(YYINITIAL); return buildCharacterLiteral('\\');  }
        case 565: break;
        case 259: 
          {  return TOKEN_LITERAL_null;  }
        case 566: break;
        case 261: 
          {  return TOKEN_LITERAL_true;  }
        case 567: break;
        case 263: 
          {  return TOKEN_LITERAL_this;  }
        case 568: break;
        case 270: 
          {  return TOKEN_LITERAL_case;  }
        case 569: break;
        case 272: 
          {  return TOKEN_LITERAL_char;  }
        case 570: break;
        case 277: 
          {  return TOKEN_LITERAL_byte;  }
        case 571: break;
        case 278: 
          {  return TOKEN_LITERAL_else;  }
        case 572: break;
        case 292: 
          {  return TOKEN_LITERAL_long;  }
        case 573: break;
        case 299: 
          {  return TOKEN_LITERAL_goto;  }
        case 574: break;
        case 300: 
          {  return TOKEN_LITERAL_void;  }
        case 575: break;
        case 304: 
          {  return TOKEN_BSR_ASSIGN;  }
        case 576: break;
        case 319: 
          {  return TOKEN_LITERAL_throw;  }
        case 577: break;
        case 321: 
          {  return TOKEN_LITERAL_const;  }
        case 578: break;
        case 324: 
          {  return TOKEN_LITERAL_catch;  }
        case 579: break;
        case 325: 
          {  return TOKEN_LITERAL_class;  }
        case 580: break;
        case 327: 
          {  return TOKEN_LITERAL_binds;  }
        case 581: break;
        case 329: 
          {  return TOKEN_LITERAL_break;  }
        case 582: break;
        case 332: 
          {  return TOKEN_LITERAL_final;  }
        case 583: break;
        case 333: 
          {  return TOKEN_LITERAL_false;  }
        case 584: break;
        case 334: 
          {  return TOKEN_LITERAL_float;  }
        case 585: break;
        case 345: 
          {  return TOKEN_LITERAL_super;  }
        case 586: break;
        case 347: 
          {  return TOKEN_LITERAL_short;  }
        case 587: break;
        case 351: 
          {  return TOKEN_LITERAL_wraps;  }
        case 588: break;
        case 352: 
          {  return TOKEN_LITERAL_while;  }
        case 589: break;
        case 354: 
          {  return TOKEN_LITERAL_public;  }
        case 590: break;
        case 363: 
          {  return TOKEN_LITERAL_import;  }
        case 591: break;
        case 365: 
          {  return TOKEN_LITERAL_native;  }
        case 592: break;
        case 368: 
          {  return TOKEN_LITERAL_throws;  }
        case 593: break;
        case 371: 
          {  return TOKEN_LITERAL_cclass;  }
        case 594: break;
        case 377: 
          {  return TOKEN_LITERAL_return;  }
        case 595: break;
        case 380: 
          {  return TOKEN_LITERAL_double;  }
        case 596: break;
        case 381: 
          {  return TOKEN_LITERAL_deploy;  }
        case 597: break;
        case 385: 
          {  return TOKEN_LITERAL_static;  }
        case 598: break;
        case 387: 
          {  return TOKEN_LITERAL_switch;  }
        case 599: break;
        case 394: 
          {  return TOKEN_LITERAL_private;  }
        case 600: break;
        case 396: 
          {  return TOKEN_LITERAL_package;  }
        case 601: break;
        case 404: 
          {  return TOKEN_LITERAL_boolean;  }
        case 602: break;
        case 406: 
          {  return TOKEN_LITERAL_extends;  }
        case 603: break;
        case 407: 
          {  return TOKEN_LITERAL_finally;  }
        case 604: break;
        case 412: 
          {  return TOKEN_LITERAL_default;  }
        case 605: break;
        case 416: 
          {  return TOKEN_LITERAL_wrappee;  }
        case 606: break;
        case 419: 
          {  return TOKEN_LITERAL_provided;  }
        case 607: break;
        case 420: 
          {  return TOKEN_LITERAL_provides;  }
        case 608: break;
        case 427: 
          {  return TOKEN_LITERAL_throwing;  }
        case 609: break;
        case 428: 
          {  return TOKEN_LITERAL_continue;  }
        case 610: break;
        case 25: 
          {  if(typePatternExpected) {
  						yybegin(TYPEPATTERN);
  						pattern.setLength(0);
  					  } else {
  					  	return TOKEN_COLON;
  					  }
  					 }
        case 611: break;
        case 150: 
        case 158: 
        case 236: 
          { 
				  int		val;

				  val = Integer.parseInt(yytext().substring(1), 8);
				  string.append((char)val);
				 }
        case 612: break;
        case 73: 
        case 74: 
          { 
				  yybegin(oldState);
				  incrementLine();
				  addComment(new JavaStyleComment(string.toString(), true, false, false));
				 }
        case 613: break;
        case 69: 
        case 70: 
          { 
				  incrementLine();
				  string.append(yytext());
				 }
        case 614: break;
        case 172: 
          { 
				  yybegin(oldState);

				  if (string.length() > 0 && string.charAt(0) == '*') {
				    //!!! graf 001222: first '*' should be removed
				    addComment(new JavadocComment(string.toString(), false, false));
				  } else {
				    addComment(new JavaStyleComment(string.toString(), false, false, false));
				  }
				 }
        case 615: break;
        case 238: 
          { 
				  yybegin(YYINITIAL);

				  int		val;

				  val = Integer.parseInt(yytext().substring(1, yylength()-1), 8);
				  return buildCharacterLiteral((char)val);
				 }
        case 616: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case TRADITIONALCOMMENT:
              { 
				  reportTrouble(Messages.EOF_IN_TRADITIONAL_COMMENT, null);
				  return TOKEN_EOF;
				 }
            case 459: break;
            case ENDOFLINECOMMENT:
              { 
				  reportTrouble(new CWarning(getTokenReference(),
							     Messages.EOF_IN_ENDOFLINE_COMMENT));
				  return TOKEN_EOF;
				 }
            case 460: break;
            default:
              {   return TOKEN_EOF;
 }
            }
          } else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
