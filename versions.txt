VC_14 - not tagged yet
- Virtual Class scoping
	- lookup has been changed
		- if looking up in a mixin class, first we lookup in the direct mixin interface class
		  if we can find there what we've searched for, we stop the lookup process,
		  otherwise it is continues as usual
		- in the cause the lookup algorithm finds more than one interface with the same identifier,
		  we check if they are all mixin interfaces, if so, we return the first one (which is the
		  most specific)
		- see CClass.lookupClass(CCLass caller, String ident) for details (IVICA Tag)
- VC Method redefinition mechanism changed
- check for cycles in cclass interface pulled up to joinAll pass
  -> no StackOverflowError in generateCaesarTyleGraph pass anymore
- every cclass has to be declared as public (temporary limitation),
  otherwise the modifier is set automatically to public and a compiler warning is thrown  
- log4j added for debug logging  

VC_13 - 22.09.2004
- Passing Caesar CLASSPATH to aspect weaver
	
VC_12 - 17.09.2004
- Caesar Attribut generation
	we use GenericAttribute to store serialized Objects containing the information
	Currently there are two kinds of stored structures:
	(1) org.caesarj.runtime.AdditionalCaesarTypeInformation
	    Since cclass interface hierarchy reassembles the Caesar Type System
	    This attribute is stored into the mixin interface .class file
	    The attribute strucuture is as follows.
	    String qn; // qualified name of the 
        boolean implicit;
        String[] mixinList;
	 	String[] nestedClasses;
	    String[] incrementFor;
		String[] superClasses;
		String[] superInterfaces;
		String implClassName;
		We use this information to reassemble the Caesar Type System from Java Bytecode.
		This is relevant for binary caesar libraries, incremental compilation and Hierarchy
		View in the Caesar GUI. 
	(2) extra modifiers stored in Integer
- ByteCodeNavigator
	using the bytecode navigator (org.caesarj.navigator), 
	AdditionalCaesarTypeInformation can easily be extracted outside of the compiler;
	relevant for Hierarchy View in the Caesar GUI
- AstGenerator added
    now method declarations and statement bodies can be created using Java snippets
    Parser has been changed in order to allow calling jBlock and jMethodDefinition from outside.
- Visitor restructured
	- The old visitor was too difficult to use and inconsitent
	- Improvements
		- visit method takes only AST node as parameter (no passing of whole state as parameter anymore)
		- the node itself contains the recursion code
		- default behavior for a set of ast elements can be easily defined, by preserving the ability 
		  to override the default behavior for a subset of nodes, e.g., we can handle all JTypeDeclarations
		  equaly except JInterfaceDeclaration
	- The new visitor is implemented using the reflection
		- There exist two type of methods
		  (1) boolean visit(ASTELEMENT self) // called before the children of the node are visited
		  (2) void endVisit(ASTELEMENT self) // called after a node and its children have been visited
		- returning false in the visit method stops the recursion into the children of the node
		- accept method in the node itself is implemented using the reflection
			- the algorithm searchs in the visitor object for a matching method signature
			- if it can not be found, it continues searching for the signature having the superclass of
			  the node as type of the ASTELEMENT parameter, etc.
			- if a method is found, then it is invoked
			- otherwise, if JPhylum is reached and not found in the visitor, the search algorithm stops
- Since org.caesarj.util has is already contained in cjbuildtools.jar it has been removed 
  from the source dir
- Automatic code replacement for cclass instantiations
	- CjQualifiedInstanceCreation
	- CjUnqualifiedInstanceCreation
	These AST nodes serve now as switch, which decides if a new call is transformed to a factory method call
	or to a plain java new call.
- Automatic binding of references to virtual classes to most specific one known in the current context
	- CjMethodCallExpression
		- prefix of the method call casted depending on the context of the calling class
		- return type of the method call casted depending on the context given by the prefix
	- CjAssigmentExpression
		- right expression casted depending on the context of the calling class
	- CaesarTypeNode getTypeInContextOf(CaesarTypeNode n) in CaesarTypeNode has been introduced
		if the qualified name of n is A.B.C.D.E	and the qualified name of 'this' node is E.F.G.H
		then the qualified name of the most specific node is A.B.C.H 
		if A is subtype of E and A.B subtype of E.F and A.B.C subtype of E.F.G
		otherwise E.F.G.H is returned
- FJ legacy code has been removed 
	- CjConstructorCall
	- CjConstructorBlock
	- CjMethodCallExpression has been cleaned up
- Aspect deployment
    - The amount of generated code for deployment support is significantly reduced.
      Now only Registry class is generated. Other support classes are now used as normal
      runtime classes.
    - The larger part of deployment generation is rewritten using code snippets.
    - Multiple aspect deployment strategies enabled. Runtime library provides thread based
      aspect deployment and aspect deployment on entire JVM process.
    - The semantics of around advices in case of multiple aspect instances is changed.
      Now the proceed() arguments of one around advice call are passed as arguments
      to the call of the around advice of the next aspect instance. 

VC_11 - 13.08.2004
- Aspect deployment
    - Old "deploy" block translation restored. DeploySupport class used again. 
      "deploy" blocks ignore null pointers as well as non-Caesar objects.
    - "$deploy" method functionality of aspect classes is moved to "$delploy" of
      Registry classes and ThreadMapper classes, because apect class cannot instantiate
      correctly deployment support classes for all registries on which they are deployed.
- Examples
    - Pricing example ported to 0.3.0
    - Observer example porter to 0.3.0

VC_10 - 10.08.2004
- Mixin generator
	- Hardcoded output path for generated mixins is replaced by compiler destination path
    - Removed dependency of mixin generator on CLASSPATH variable. The input class files are now 
	  retrieved only from the compiler destination folder.
	- "abstract" modifier is set for generated mixin classes. Mixin classes must be abstract, 
	  because they do not implement factory methods.
	- Generated mixin classes are included to weaving process.
- Aspect deployment
	- Earlier registry deployment support classes were responsible for deploying objects
	  to all parent registries. Now object is responsible itself for registering to all
	  appropriate registry classes. The new implementation relies on Caesar type system for 
	  correct resolution of suppor calls. For the new implementation following changes were
	  required
		- Runtime interface AspectIfc was modified so that it contains methods for
	      object deployment and undeployment
	    - Runtime class CaesarObject inherits from AspectIfc and contains empty implementations
	      of deployment methods
	    - Deployment method implementation for crosscutting classes are generated
	    - Runtime class DeploymentSupport removed
	    - Changed "deploy" block translation so that it uses new deployment methods
	    - Changed static deployment so that it uses new deployment methods
	    - Registry classes do not contain anymore deploy calls to their parents	     
	- The inheritance relationships between deployment support classes are not generated.
	  They cannot be generated correctly, unless the deployment support classes are 
	  treated as virtual classes and participate in Caesar type system. The inheritance
	  relationships are essential for inheriting advices, which depend on abstract pointcuts.
	  Other purposes of such relationships were not identified
	- Pointcut resolution for mixin classes was implemented. They lookup pointcuts in their
	  origin classes.
- BCEL World singleton instance is reset before compilation

VC_9 - 23.07.2004
- ACC_MIXIN modifier added for cclass
- CaesarObject as root for all cclass types has been introduced
- Unit tests has been extended and reorganized 
	- separate compilation of tests
	- every test in separated package
- Caesar type graph has been redesigned (org.caesarj.compiler.typesys)
	- No separated graphs for complete and declaration graphs
	- graph transofrmations moved to separate graph visitors
- Bytecode generation for method calls has been patched, 
  introduction of AdditionalGenerationContext for keeping the reference for current caller
  ( KOPI I condemn you! ;) )
	- super call uses direct super of caller as target, rather than the owner of the method
	- access to fields declared in one of parents uses caller as target
	- same for virtual calls and interface calls
	Consequences for: aspectj pointcuts, mixin copies and method calls


VC_8 - 08.07.2004
- inner cclass always static ->
	* outer passed as extra ctor parameter
	* outer accessed via interface


VC_7 - ??.07.2004
- added extra AST Elements for virtual class and cclass interface
- added caesar specific compiler messages
- interface generation changed ->
	* support classes for dynamic interfaces not implemented by impl class itself,
	  but rather by cclass interface
- ctors reduced to only default paramter-less one ->
	* using of init methods
- Class Mixer reduced to Class Generator only ->
	features: copy class, replace outer, replace super


VC_6 - 28.06.2004
- type graphs ->
 	* explicit (as declared in caesar code), 
	* complete (including implicit types), 
	* java (mapped back to java)
- super type adjustment
- cclass interface creation
- implicit type creation
- ctors with free parameters
- ctors inheritance
- factory methods automatically created
- class generator still not integrated


VC_5 
no info

...

VC_1 
no info