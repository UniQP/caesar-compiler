VC_11 - 13.08.2004
- Aspect deployment
    - Old "deploy" block translation restored. DeploySupport class used again. 
      "deploy" blocks ignore null pointers as well as non-Caesar objects.
    - "$deploy" method functionality of aspect classes is moved to "$delploy" of
      Registry classes and ThreadMapper classes, because apect class cannot instantiate
      correctly deployment support classes for all registries on which they are deployed.
- Examples
    - Pricing example ported to 0.3.0
    - Observer example porter to 0.3.0

VC_10 - 10.08.2004
- Mixin generator
	- Hardcoded output path for generated mixins is replaced by compiler destination path
    - Removed dependency of mixin generator on CLASSPATH variable. The input class files are now 
	  retrieved only from the compiler destination folder.
	- "abstract" modifier is set for generated mixin classes. Mixin classes must be abstract, 
	  because they do not implement factory methods.
	- Generated mixin classes are included to weaving process.
- Aspect deployment
	- Earlier registry deployment support classes were responsible for deploying objects
	  to all parent registries. Now object is responsible itself for registering to all
	  appropriate registry classes. The new implementation relies on Caesar type system for 
	  correct resolution of suppor calls. For the new implementation following changes were
	  required
		- Runtime interface AspectIfc was modified so that it contains methods for
	      object deployment and undeployment
	    - Runtime class CaesarObject inherits from AspectIfc and contains empty implementations
	      of deployment methods
	    - Deployment method implementation for crosscutting classes are generated
	    - Runtime class DeploymentSupport removed
	    - Changed "deploy" block translation so that it uses new deployment methods
	    - Changed static deployment so that it uses new deployment methods
	    - Registry classes do not contain anymore deploy calls to their parents	     
	- The inheritance relationships between deployment support classes are not generated.
	  They cannot be generated correctly, unless the deployment support classes are 
	  treated as virtual classes and participate in Caesar type system. The inheritance
	  relationships are essential for inheriting advices, which depend on abstract pointcuts.
	  Other purposes of such relationships were not identified
	- Pointcut resolution for mixin classes was implemented. They lookup pointcuts in their
	  origin classes.
- BCEL World singleton instance is reset before compilation

VC_9 - 23.07.2004
- ACC_MIXIN modifier added for cclass
- CaesarObject as root for all cclass types has been introduced
- Unit tests has been extended and reorganized 
	- separate compilation of tests
	- every test in separated package
- Caesar type graph has been redesigned (org.caesarj.compiler.typesys)
	- No separated graphs for complete and declaration graphs
	- graph transofrmations moved to separate graph visitors
- Bytecode generation for method calls has been patched, 
  introduction of AdditionalGenerationContext for keeping the reference for current caller
  ( KOPI I condemn you! ;) )
	- super call uses direct super of caller as target, rather than the owner of the method
	- access to fields declared in one of parents uses caller as target
	- same for virtual calls and interface calls
	Consequences for: aspectj pointcuts, mixin copies and method calls


VC_8 - 08.07.2004
- inner cclass always static ->
	* outer passed as extra ctor parameter
	* outer accessed via interface


VC_7 - ??.07.2004
- added extra AST Elements for virtual class and cclass interface
- added caesar specific compiler messages
- interface generation changed ->
	* support classes for dynamic interfaces not implemented by impl class itself,
	  but rather by cclass interface
- ctors reduced to only default paramter-less one ->
	* using of init methods
- Class Mixer reduced to Class Generator only ->
	features: copy class, replace outer, replace super


VC_6 - 28.06.2004
- type graphs ->
 	* explicit (as declared in caesar code), 
	* complete (including implicit types), 
	* java (mapped back to java)
- super type adjustment
- cclass interface creation
- implicit type creation
- ctors with free parameters
- ctors inheritance
- factory methods automatically created
- class generator still not integrated


VC_5 
no info

...

VC_1 
no info